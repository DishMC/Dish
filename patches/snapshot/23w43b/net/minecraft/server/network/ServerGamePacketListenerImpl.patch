diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 3617df2..992b324 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -13,6 +13,7 @@ import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.net.SocketAddress;
 import java.time.Instant;
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.Iterator;
@@ -390,6 +391,23 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                 double d5 = clampHorizontal(serverboundmovevehiclepacket.getZ());
                 float f = Mth.wrapDegrees(serverboundmovevehiclepacket.getYRot());
                 float f1 = Mth.wrapDegrees(serverboundmovevehiclepacket.getXRot());
+                // dish
+                // Not sure if converting the passangers to a stream, then filtering out non players then converting it back to an ArrayList is good for performance.
+                ArrayList<net.ouja.api.Player> players = entity.getPassengers().stream().map((e) -> {
+                    if (e instanceof Player) return new net.ouja.dish.entity.DishPlayer(((ServerPlayer) e));
+                    return null;
+                }).filter(Objects::nonNull).collect(Collectors.toCollection(ArrayList::new));
+                double xOld = clampHorizontal(this.vehicleLastGoodX);
+                double yOld = clampHorizontal(this.vehicleLastGoodY);
+                double zOld = clampHorizontal(this.vehicleLastGoodZ);
+                net.ouja.api.event.vehicle.VehicleMoveEvent event = new net.ouja.api.event.vehicle.VehicleMoveEvent(players, d0, d1, d2, xOld, yOld, zOld);
+                net.ouja.dish.plugins.RegisteredEvents.callEvent(event);
+                if (event.isCancelled()) {
+                    entity.absMoveTo(xOld, yOld, zOld, f, f1);
+                    this.send(new ClientboundMoveVehiclePacket(entity));
+                    return;
+                }
+                // dish end
                 double d6 = d3 - this.vehicleFirstGoodX;
                 double d7 = d4 - this.vehicleFirstGoodY;
                 double d8 = d5 - this.vehicleFirstGoodZ;
@@ -944,7 +962,19 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                     double d2 = clampHorizontal(serverboundmoveplayerpacket.getZ(this.player.getZ()));
                     float f = Mth.wrapDegrees(serverboundmoveplayerpacket.getYRot(this.player.getYRot()));
                     float f1 = Mth.wrapDegrees(serverboundmoveplayerpacket.getXRot(this.player.getXRot()));
-
+                    // dish
+                    double xOld = clampHorizontal(this.lastGoodX);
+                    double yOld = clampHorizontal(this.lastGoodY);
+                    double zOld = clampHorizontal(this.lastGoodZ);
+                    if (d0 != xOld || d1 != yOld || d2 != zOld) {
+                        net.ouja.api.event.player.PlayerMoveEvent event = new net.ouja.api.event.player.PlayerMoveEvent(new net.ouja.dish.entity.DishPlayer(this.player), d0, d1, d2, xOld, yOld, zOld);
+                        net.ouja.dish.plugins.RegisteredEvents.callEvent(event);
+                        if (event.isCancelled()) {
+                            this.teleport(xOld, yOld, zOld, f, f1);
+                            return;
+                        }
+                    }
+                    // dish end
                     if (this.player.isPassenger()) {
                         this.player.absMoveTo(this.player.getX(), this.player.getY(), this.player.getZ(), f, f1);
                         this.player.serverLevel().getChunkSource().move(this.player);
@@ -1245,9 +1275,17 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
     }
 
     private void removePlayerFromWorld() {
+        // ouja start
+        MutableComponent component = Component.translatable("multiplayer.player.left", this.player.getDisplayName());
+        net.ouja.api.event.player.PlayerQuitEvent event = new net.ouja.api.event.player.PlayerQuitEvent(new net.ouja.dish.entity.DishPlayer(this.player), net.ouja.dish.network.chat.DishComponent.fromComponent(component));
+        net.ouja.dish.plugins.RegisteredEvents.callEvent(event);
+        if (event.getQuitMessage() != null) {
+            component = net.ouja.dish.network.chat.DishComponent.toComponent(event.getQuitMessage());
+        }
+        // ouja end
         this.chatMessageChain.close();
         this.server.invalidateStatus();
-        this.server.getPlayerList().broadcastSystemMessage(Component.translatable("multiplayer.player.left", this.player.getDisplayName()).withStyle(ChatFormatting.YELLOW), false);
+        this.server.getPlayerList().broadcastSystemMessage(component, false); // dish -- change this into its own variable so plugins can modify the leave message
         this.player.disconnect();
         this.server.getPlayerList().remove(this.player);
         this.player.getTextFilter().leave();
@@ -1299,7 +1337,11 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
                     this.chatMessageChain.append(completablefuture, (filteredtext) -> {
                         PlayerChatMessage playerchatmessage1 = playerchatmessage.withUnsignedContent(component).filter(filteredtext.mask());
-
+                        // dish
+                        net.ouja.api.event.player.PlayerChatEvent event = new net.ouja.api.event.player.PlayerChatEvent(new net.ouja.dish.entity.DishPlayer(this.player), net.ouja.dish.network.chat.DishComponent.fromComponent(playerchatmessage1.decoratedContent()));
+                        net.ouja.dish.plugins.RegisteredEvents.callEvent(event);
+                        if (event.isCancelled()) return;
+                        // dish end
                         this.broadcastChatMessage(playerchatmessage1);
                     });
                 });
