diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 1a5123c..fa5d35d 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -655,10 +655,25 @@ public class ServerPlayer extends Player {
 
     @Override
     public void die(DamageSource cause) {
+        // dish
+        net.ouja.api.event.player.PlayerDeathEvent event = new net.ouja.api.event.player.PlayerDeathEvent(
+            new net.ouja.dish.entity.DishPlayer(this),
+            new net.ouja.api.world.level.block.BlockPos(
+                this.blockPosition().getX(),
+                this.blockPosition().getY(),
+                this.blockPosition().getZ(),
+                new net.ouja.dish.world.DishLevel((ServerLevel)this.level())
+            ),
+            cause.toDish(),
+            net.ouja.dish.network.chat.DishComponent.fromComponent(this.getCombatTracker().getDeathMessage())
+        );
+        net.ouja.dish.plugins.RegisteredEvents.callEvent(event);
+        if (event.isCancelled()) return;
+        // dish end
         this.gameEvent(GameEvent.ENTITY_DIE);
         boolean _boolean = this.level().getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
         if (_boolean) {
-            Component deathMessage = this.getCombatTracker().getDeathMessage();
+            Component deathMessage = net.ouja.dish.network.chat.DishComponent.toComponent(event.getDeathMessage()); // dish -- allow plugins to modify the death message
             this.connection
                 .send(
                     new ClientboundPlayerCombatKillPacket(this.getId(), deathMessage),
@@ -945,6 +960,11 @@ public class ServerPlayer extends Player {
         } else if (this.bedBlocked(at, direction)) {
             return Either.left(Player.BedSleepingProblem.OBSTRUCTED);
         } else {
+            // dish
+            net.ouja.api.event.player.PlayerSleepEvent event = new net.ouja.api.event.player.PlayerSleepEvent(new net.ouja.dish.entity.DishPlayer(this), new net.ouja.api.world.level.block.BlockPos(at.getX(), at.getY(), at.getZ(), new net.ouja.dish.world.DishLevel((ServerLevel)this.level())));
+            net.ouja.dish.plugins.RegisteredEvents.callEvent(event);
+            if (event.isCancelled()) return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_HERE);
+            // dish end
             this.setRespawnPosition(this.level().dimension(), at, this.getYRot(), false, true);
             if (this.level().isDay()) {
                 return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
@@ -959,7 +979,7 @@ public class ServerPlayer extends Player {
                             new AABB(vec3.x() - 8.0, vec3.y() - 5.0, vec3.z() - 8.0, vec3.x() + 8.0, vec3.y() + 5.0, vec3.z() + 8.0),
                             monster -> monster.isPreventingPlayerRest(this)
                         );
-                    if (!entitiesOfClass.isEmpty()) {
+                    if (!event.canSleepWhileMonstersAreNear() && !entitiesOfClass.isEmpty()) { // dish -- PlayerSleepEvent modifies if the player can sleep while monsters are near.
                         return Either.left(Player.BedSleepingProblem.NOT_SAFE);
                     }
                 }
@@ -1641,6 +1661,11 @@ public class ServerPlayer extends Player {
         if (this.gameMode.getGameModeForPlayer() == GameType.SPECTATOR) {
             this.setCamera(targetEntity);
         } else {
+            // dish start
+            net.ouja.api.event.player.PlayerAttackEvent event = new net.ouja.api.event.player.PlayerAttackEvent(new net.ouja.dish.entity.DishPlayer(this), new net.ouja.dish.entity.DishEntity((LivingEntity)targetEntity));
+            net.ouja.dish.plugins.RegisteredEvents.callEvent(event);
+            if (event.isCancelled()) return;
+            // dish end
             super.attack(targetEntity);
         }
     }
