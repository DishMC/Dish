diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index 7f3b1d3..5b3f8c1 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -1,3 +1,7 @@
+/**
+ * Modifications:
+ *  - Prevent chunk loading by flowing liquids
+ */
 package net.minecraft.world.level.material;
 
 import com.google.common.collect.Maps;
@@ -128,7 +132,8 @@ public abstract class FlowingFluid extends Fluid {
         if (!fluidstate.isEmpty()) {
             BlockState blockstate = level.getBlockState(blockpos);
             BlockPos blockpos1 = blockpos.below();
-            BlockState blockstate1 = level.getBlockState(blockpos1);
+            BlockState blockstate1 = level.getBlockStateIfLoaded(blockpos1); // dish
+            if (blockstate1 == null) return; // dish
             FluidState fluidstate1 = this.getNewLiquid(level, blockpos1, blockstate1);
 
             if (this.canSpreadTo(level, blockpos, blockstate, Direction.DOWN, blockpos1, blockstate1, level.getFluidState(blockpos1), fluidstate1.getType())) {
@@ -159,7 +164,8 @@ public abstract class FlowingFluid extends Fluid {
                 Direction direction = (Direction) entry.getKey();
                 FluidState fluidstate1 = (FluidState) entry.getValue();
                 BlockPos blockpos1 = blockpos.relative(direction);
-                BlockState blockstate1 = level.getBlockState(blockpos1);
+                BlockState blockstate1 = level.getBlockStateIfLoaded(blockpos1); // dish
+                if (blockstate1 == null) continue; // dish
 
                 if (this.canSpreadTo(level, blockpos, blockstate, direction, blockpos1, blockstate1, level.getFluidState(blockpos1), fluidstate1.getType())) {
                     this.spreadTo(level, blockpos1, blockstate1, direction, fluidstate1);
@@ -177,7 +183,8 @@ public abstract class FlowingFluid extends Fluid {
         while (iterator.hasNext()) {
             Direction direction = (Direction) iterator.next();
             BlockPos blockpos1 = blockpos.relative(direction);
-            BlockState blockstate1 = level.getBlockState(blockpos1);
+            BlockState blockstate1 = level.getBlockStateIfLoaded(blockpos1); // dish
+            if (blockstate1 == null) continue;
             FluidState fluidstate = blockstate1.getFluidState();
 
             if (fluidstate.getType().isSame(this) && this.canPassThroughWall(direction, level, blockpos, blockstate, blockpos1, blockstate1)) {
@@ -294,11 +301,23 @@ public abstract class FlowingFluid extends Fluid {
             if (direction1 != direction) {
                 BlockPos blockpos2 = blockpos.relative(direction1);
                 short short0 = getCacheKey(blockpos1, blockpos2);
+                /*
                 Pair<BlockState, FluidState> pair = (Pair) short2objectmap.computeIfAbsent(short0, (short1) -> {
                     BlockState blockstate1 = levelreader.getBlockState(blockpos2);
 
                     return Pair.of(blockstate1, blockstate1.getFluidState());
                 });
+                */
+                // dish
+                Pair<BlockState, FluidState> pair = short2objectmap.get(short0);
+                if (pair == null) {
+                    BlockState blockStateD = levelreader.getBlockStateIfLoaded(blockpos1);
+                    if (blockStateD == null) continue;
+
+                    pair = Pair.of(blockStateD, blockStateD.getFluidState());
+                    short2objectmap.put(short0, pair);
+                }
+                // dish end
                 BlockState blockstate1 = (BlockState) pair.getFirst();
                 FluidState fluidstate = (FluidState) pair.getSecond();
 
@@ -370,11 +389,23 @@ public abstract class FlowingFluid extends Fluid {
             Direction direction = (Direction) iterator.next();
             BlockPos blockpos1 = blockpos.relative(direction);
             short short0 = getCacheKey(blockpos, blockpos1);
+            /*
             Pair<BlockState, FluidState> pair = (Pair) short2objectmap.computeIfAbsent(short0, (short1) -> {
                 BlockState blockstate1 = level.getBlockState(blockpos1);
 
                 return Pair.of(blockstate1, blockstate1.getFluidState());
             });
+            */
+            // dish
+            Pair<BlockState, FluidState> pair = short2objectmap.get(short0);
+            if (pair == null) {
+                BlockState blockStateD = level.getBlockStateIfLoaded(blockpos1);
+                if (blockStateD == null) continue;
+
+                pair = Pair.of(blockStateD, blockStateD.getFluidState());
+                short2objectmap.put(short0, pair);
+            }
+            // dish end
             BlockState blockstate1 = (BlockState) pair.getFirst();
             FluidState fluidstate = (FluidState) pair.getSecond();
             FluidState fluidstate1 = this.getNewLiquid(level, blockpos1, blockstate1);
