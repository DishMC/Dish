diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
index 07d42c2..ca191a5 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -497,10 +497,14 @@ public abstract class ChunkGenerator {
         return ((Biome) holder.value()).getMobSettings().getMobs(mobcategory);
     }
 
-    public void createStructures(RegistryAccess registryaccess, ChunkGeneratorStructureState chunkgeneratorstructurestate, StructureManager structuremanager, ChunkAccess chunkaccess, StructureTemplateManager structuretemplatemanager) {
+    public void createStructures(RegistryAccess registryaccess, ChunkGeneratorStructureState chunkgeneratorstructurestate, StructureManager structuremanager, ChunkAccess chunkaccess, StructureTemplateManager structuretemplatemanager, ServerLevel serverlevel) { // dish -- add serverlevel to parameters
         ChunkPos chunkpos = chunkaccess.getPos();
         SectionPos sectionpos = SectionPos.bottomOf(chunkaccess);
         RandomState randomstate = chunkgeneratorstructurestate.randomState();
+        // dish
+        net.ouja.dish.world.DishLevel dishLevel = new net.ouja.dish.world.DishLevel(serverlevel);
+        net.ouja.api.world.level.chunk.ChunkPos dishChunkPos = new net.ouja.api.world.level.chunk.ChunkPos(chunkpos.x, chunkpos.z, dishLevel);
+        // dish end
 
         chunkgeneratorstructurestate.possibleStructureSets().forEach((holder) -> {
             StructurePlacement structureplacement = ((StructureSet) holder.value()).placement();
@@ -518,6 +522,12 @@ public abstract class ChunkGenerator {
 
             if (structureplacement.isStructureChunk(chunkgeneratorstructurestate, chunkpos.x, chunkpos.z)) {
                 if (list.size() == 1) {
+                    // dish
+                    net.ouja.dish.world.level.chunk.DishStructure dishStructure = new net.ouja.dish.world.level.chunk.DishStructure(list.get(0).structure().value());
+                    net.ouja.api.event.world.level.chunk.StructureGenerateEvent event = new net.ouja.api.event.world.level.chunk.StructureGenerateEvent(dishStructure, dishChunkPos);
+                    net.ouja.dish.plugins.RegisteredEvents.callEvent(event);
+                    if (event.isCancelled()) return;
+                    // dish end
                     this.tryGenerateStructure((StructureSet.StructureSelectionEntry) list.get(0), structuremanager, registryaccess, randomstate, structuretemplatemanager, chunkgeneratorstructurestate.getLevelSeed(), chunkaccess, chunkpos, sectionpos);
                 } else {
                     ArrayList<StructureSet.StructureSelectionEntry> arraylist = new ArrayList(list.size());
@@ -551,7 +561,16 @@ public abstract class ChunkGenerator {
                             }
 
                             StructureSet.StructureSelectionEntry structureset_structureselectionentry3 = (StructureSet.StructureSelectionEntry) arraylist.get(k);
-
+                            // dish
+                            net.ouja.dish.world.level.chunk.DishStructure dishStructure = new net.ouja.dish.world.level.chunk.DishStructure(structureset_structureselectionentry3.structure().value());
+                            net.ouja.api.event.world.level.chunk.StructureGenerateEvent event = new net.ouja.api.event.world.level.chunk.StructureGenerateEvent(dishStructure, dishChunkPos);
+                            net.ouja.dish.plugins.RegisteredEvents.callEvent(event);
+                            if (event.isCancelled()) {
+                                arraylist.remove(k);
+                                i -= structureset_structureselectionentry3.weight();
+                                break;
+                            }
+                            // dish end
                             if (this.tryGenerateStructure(structureset_structureselectionentry3, structuremanager, registryaccess, randomstate, structuretemplatemanager, chunkgeneratorstructurestate.getLevelSeed(), chunkaccess, chunkpos, sectionpos)) {
                                 return;
                             }
