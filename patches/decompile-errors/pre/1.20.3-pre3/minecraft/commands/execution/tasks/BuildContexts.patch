diff --git a/minecraft/commands/execution/tasks/BuildContexts.java b/minecraft/commands/execution/tasks/BuildContexts.java
index 3dc0c6b..af6a4ed 100644
--- a/minecraft/commands/execution/tasks/BuildContexts.java
+++ b/minecraft/commands/execution/tasks/BuildContexts.java
@@ -77,7 +77,7 @@ public class BuildContexts<T extends ExecutionCommandSource<T>> {
                             ExecutionCommandSource executioncommandsource = (ExecutionCommandSource) iterator.next();
 
                             try {
-                                Collection<T> collection = ContextChain.runModifier(commandcontext, executioncommandsource, (commandcontext1, flag1, j) -> {
+                                Collection<T> collection = ContextChain.runModifier(commandcontext, (T) executioncommandsource, (commandcontext1, flag1, j) -> {
                                 }, flag);
 
                                 if (list2.size() + collection.size() >= i) {
@@ -104,7 +104,7 @@ public class BuildContexts<T extends ExecutionCommandSource<T>> {
 
         if (((List) list1).isEmpty()) {
             if (chainmodifiers1.isReturn()) {
-                executioncontext.queueNext(new CommandQueueEntry<>(frame, FallthroughTask.instance()));
+                executioncontext.queueNext(new CommandQueueEntry<T>(frame, FallthroughTask.instance()));
             }
 
         } else {
@@ -117,13 +117,13 @@ public class BuildContexts<T extends ExecutionCommandSource<T>> {
                 Iterator iterator1 = ((List) list1).iterator();
 
                 while (iterator1.hasNext()) {
-                    T t1 = (ExecutionCommandSource) iterator1.next();
+                    T t1 = (T) iterator1.next();
 
                     customcommandexecutor.run(t1, contextchain, chainmodifiers1, executioncontrol);
                 }
             } else {
                 if (chainmodifiers1.isReturn()) {
-                    T t2 = (ExecutionCommandSource) ((List) list1).get(0);
+                    T t2 = list1.get(0);
 
                     t2 = t2.withCallback(CommandResultCallback.chain(t2.callback(), frame.returnValueConsumer()));
                     list1 = List.of(t2);
@@ -131,7 +131,7 @@ public class BuildContexts<T extends ExecutionCommandSource<T>> {
 
                 ExecuteCommand<T> executecommand = new ExecuteCommand<>(this.commandInput, chainmodifiers1, commandcontext1);
 
-                ContinuationTask.schedule(executioncontext, frame, (List) list1, (frame1, executioncommandsource1) -> {
+                ContinuationTask.schedule(executioncontext, frame, list1, (frame1, executioncommandsource1) -> {
                     return new CommandQueueEntry<>(frame1, executecommand.bind(executioncommandsource1));
                 });
             }
