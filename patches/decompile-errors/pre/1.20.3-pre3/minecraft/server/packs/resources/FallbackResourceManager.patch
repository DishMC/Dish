diff --git a/minecraft/server/packs/resources/FallbackResourceManager.java b/minecraft/server/packs/resources/FallbackResourceManager.java
index 6b1ae20..94b6e9d 100644
--- a/minecraft/server/packs/resources/FallbackResourceManager.java
+++ b/minecraft/server/packs/resources/FallbackResourceManager.java
@@ -159,10 +159,13 @@ public class FallbackResourceManager implements ResourceManager {
         return resourcelocation.withPath(resourcelocation.getPath() + ".mcmeta");
     }
 
+    record ResourceWithSourceAndIndex(PackResources packResources, IoSupplier<InputStream> resource, int packIndex) {
+    }
+
     @Override
     public Map<ResourceLocation, Resource> listResources(String s, Predicate<ResourceLocation> predicate) {
-        Map<ResourceLocation, 1ResourceWithSourceAndIndex> map = new HashMap();
-        Map<ResourceLocation, 1ResourceWithSourceAndIndex> map1 = new HashMap();
+        Map<ResourceLocation, ResourceWithSourceAndIndex> map = new HashMap();
+        Map<ResourceLocation, ResourceWithSourceAndIndex> map1 = new HashMap();
         int i = this.fallbacks.size();
 
         for(int j = 0; j < i; ++j) {
@@ -173,18 +176,14 @@ public class FallbackResourceManager implements ResourceManager {
             PackResources packresources = fallbackresourcemanager_packentry.resources;
 
             if (packresources != null) {
+                int finalJ = j;
                 packresources.listResources(this.type, this.namespace, s, (resourcelocation, iosupplier) -> {
-                    record 1ResourceWithSourceAndIndex(PackResources packResources, IoSupplier<InputStream> resource, int packIndex) {
-
-                    }
-
-
                     if (isMetadata(resourcelocation)) {
                         if (predicate.test(getResourceLocationFromMetadata(resourcelocation))) {
-                            map1.put(resourcelocation, new 1ResourceWithSourceAndIndex(packresources, iosupplier, j));
+                            map1.put(resourcelocation, new ResourceWithSourceAndIndex(packresources, iosupplier, finalJ));
                         }
                     } else if (predicate.test(resourcelocation)) {
-                        map.put(resourcelocation, new 1ResourceWithSourceAndIndex(packresources, iosupplier, j));
+                        map.put(resourcelocation, new ResourceWithSourceAndIndex(packresources, iosupplier, finalJ));
                     }
 
                 });
@@ -193,18 +192,18 @@ public class FallbackResourceManager implements ResourceManager {
 
         Map<ResourceLocation, Resource> map2 = Maps.newTreeMap();
 
-        map.forEach((resourcelocation, 1resourcewithsourceandindex) -> {
+        map.forEach((resourcelocation, resourcewithsourceandindex) -> {
             ResourceLocation resourcelocation1 = getMetadataLocation(resourcelocation);
-            1ResourceWithSourceAndIndex 1resourcewithsourceandindex1 = (1ResourceWithSourceAndIndex)map1.get(resourcelocation1);
+            ResourceWithSourceAndIndex resourcewithsourceandindex1 = (ResourceWithSourceAndIndex)map1.get(resourcelocation1);
             IoSupplier iosupplier;
 
-            if (1resourcewithsourceandindex1 != null && 1resourcewithsourceandindex1.packIndex >= 1resourcewithsourceandindex.packIndex) {
-                iosupplier = convertToMetadata(1resourcewithsourceandindex1.resource);
+            if (resourcewithsourceandindex1 != null && resourcewithsourceandindex1.packIndex >= resourcewithsourceandindex.packIndex) {
+                iosupplier = convertToMetadata(resourcewithsourceandindex1.resource);
             } else {
                 iosupplier = ResourceMetadata.EMPTY_SUPPLIER;
             }
 
-            map2.put(resourcelocation, createResource(1resourcewithsourceandindex.packResources, resourcelocation, 1resourcewithsourceandindex.resource, iosupplier));
+            map2.put(resourcelocation, createResource(resourcewithsourceandindex.packResources, resourcelocation, resourcewithsourceandindex.resource, iosupplier));
         });
         return map2;
     }
