diff --git a/minecraft/server/level/ServerLevel.java b/minecraft/server/level/ServerLevel.java
index e683ed0..9991467 100644
--- a/minecraft/server/level/ServerLevel.java
+++ b/minecraft/server/level/ServerLevel.java
@@ -203,11 +203,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     private final RandomSequences randomSequences;
 
     public ServerLevel(MinecraftServer minecraftserver, Executor executor, LevelStorageSource.LevelStorageAccess levelstoragesource_levelstorageaccess, ServerLevelData serverleveldata, ResourceKey<Level> resourcekey, LevelStem levelstem, ChunkProgressListener chunkprogresslistener, boolean flag, long i, List<CustomSpawner> list, boolean flag1, @Nullable RandomSequences randomsequences) {
-        RegistryAccess.Frozen registryaccess_frozen = minecraftserver.registryAccess();
-        Holder holder = levelstem.type();
-
-        Objects.requireNonNull(minecraftserver);
-        super(serverleveldata, resourcekey, registryaccess_frozen, holder, minecraftserver::getProfiler, false, flag, i, minecraftserver.getMaxChainedNeighborUpdates());
+        super(serverleveldata, resourcekey, minecraftserver.registryAccess(), levelstem.type(), minecraftserver::getProfiler, false, flag, i, minecraftserver.getMaxChainedNeighborUpdates());
         this.players = Lists.newArrayList();
         this.entityTickList = new EntityTickList();
         this.blockTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded, this.getProfilerSupplier());
@@ -432,7 +428,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     private void wakeUpAllPlayers() {
         this.sleepStatus.removeAllSleepers();
-        ((List) this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList())).forEach((serverplayer) -> {
+        (this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList())).forEach((serverplayer) -> {
             serverplayer.stopSleepInBed(false, false);
         });
     }
@@ -947,7 +943,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
 
     public boolean tryAddFreshEntityWithPassengers(Entity entity) {
-        Stream stream = entity.getSelfAndPassengers().map(Entity::getUUID);
+        Stream<UUID> stream = entity.getSelfAndPassengers().map(Entity::getUUID);
         PersistentEntitySectionManager persistententitysectionmanager = this.entityManager;
 
         Objects.requireNonNull(this.entityManager);
@@ -1624,13 +1620,13 @@ public class ServerLevel extends Level implements WorldGenLevel {
             Iterator iterator = iterable.iterator();
 
             while (iterator.hasNext()) {
-                T t0 = iterator.next();
+                T t0 = (T) iterator.next();
                 String s = (String) function.apply(t0);
 
                 object2intopenhashmap.addTo(s, 1);
             }
 
-            return (String) object2intopenhashmap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> {
+            return (String) object2intopenhashmap.object2IntEntrySet().stream().sorted(Comparator.<Entry<String>, Integer>comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> {
                 String s1 = (String) entry.getKey();
 
                 return s1 + ":" + entry.getIntValue();
