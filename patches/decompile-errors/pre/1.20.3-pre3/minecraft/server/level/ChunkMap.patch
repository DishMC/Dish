diff --git a/minecraft/server/level/ChunkMap.java b/minecraft/server/level/ChunkMap.java
index cc5548c..91c4a54 100644
--- a/minecraft/server/level/ChunkMap.java
+++ b/minecraft/server/level/ChunkMap.java
@@ -332,7 +332,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             CompletableFuture<List<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> completablefuture1 = Util.sequence(list);
             CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completablefuture2 = completablefuture1.thenApply((list2) -> {
                 List<ChunkAccess> list3 = Lists.newArrayList();
-                final int l1 = 0;
+                int l1 = 0;
 
                 for (Iterator iterator = list2.iterator(); iterator.hasNext(); ++l1) {
                     final Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = (Either) iterator.next();
@@ -344,9 +344,10 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                     Optional<ChunkAccess> optional = either.left();
 
                     if (optional.isEmpty()) {
+                        int finalL = l1;
                         return Either.right(new ChunkHolder.ChunkLoadingFailure() {
                             public String toString() {
-                                ChunkPos chunkpos2 = new ChunkPos(j + l1 % (i * 2 + 1), k + l1 / (i * 2 + 1));
+                                ChunkPos chunkpos2 = new ChunkPos(j + finalL % (i * 2 + 1), k + finalL / (i * 2 + 1));
 
                                 return "Unloaded " + chunkpos2 + " " + either.right().get();
                             }
@@ -540,7 +541,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     private void scheduleUnload(long i, ChunkHolder chunkholder) {
         CompletableFuture<ChunkAccess> completablefuture = chunkholder.getChunkToSave();
-        Consumer consumer = (chunkaccess) -> {
+        Consumer<ChunkAccess> consumer = (chunkaccess) -> {
             CompletableFuture<ChunkAccess> completablefuture1 = chunkholder.getChunkToSave();
 
             if (completablefuture1 != completablefuture) {
@@ -625,7 +626,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
                 return flag;
             });
-        }).thenApplyAsync((optional) -> {
+        }).<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>thenApplyAsync((optional) -> {
             this.level.getProfiler().incrementCounter("chunkLoad");
             if (optional.isPresent()) {
                 ProtoChunk protochunk = ChunkSerializer.read(this.level, this.poiManager, chunkpos, (CompoundTag) optional.get());
@@ -860,7 +861,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         if (!chunkholder.wasAccessibleSinceLastSave()) {
             return false;
         } else {
-            ChunkAccess chunkaccess = (ChunkAccess) chunkholder.getChunkToSave().getNow((Object) null);
+            ChunkAccess chunkaccess = (ChunkAccess) chunkholder.getChunkToSave().getNow(null);
 
             if (!(chunkaccess instanceof ImposterProtoChunk) && !(chunkaccess instanceof LevelChunk)) {
                 return false;
@@ -1017,7 +1018,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 return chunkaccess instanceof LevelChunk ? Optional.of((LevelChunk) chunkaccess) : Optional.empty();
             });
 
-            csvoutput.writeRow(chunkpos.x, chunkpos.z, chunkholder.getTicketLevel(), optional.isPresent(), optional.map(ChunkAccess::getStatus).orElse((Object) null), optional1.map(LevelChunk::getFullStatus).orElse((Object) null), printFuture(chunkholder.getFullChunkFuture()), printFuture(chunkholder.getTickingChunkFuture()), printFuture(chunkholder.getEntityTickingChunkFuture()), this.distanceManager.getTicketDebugString(i), this.anyPlayerCloseEnoughForSpawning(chunkpos), optional1.map((levelchunk) -> {
+            csvoutput.writeRow(chunkpos.x, chunkpos.z, chunkholder.getTicketLevel(), optional.isPresent(), optional.map(ChunkAccess::getStatus).orElse(null), optional1.map(LevelChunk::getFullStatus).orElse(null), printFuture(chunkholder.getFullChunkFuture()), printFuture(chunkholder.getTickingChunkFuture()), printFuture(chunkholder.getEntityTickingChunkFuture()), this.distanceManager.getTicketDebugString(i), this.anyPlayerCloseEnoughForSpawning(chunkpos), optional1.map((levelchunk) -> {
                 return levelchunk.getBlockEntities().size();
             }).orElse(0), tickingtracker.getTicketDebugString(i), tickingtracker.getLevel(i), optional1.map((levelchunk) -> {
                 return levelchunk.getBlockTicks().count();
@@ -1030,7 +1031,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     private static String printFuture(CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completablefuture) {
         try {
-            Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = (Either) completablefuture.getNow((Object) null);
+            Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = (Either) completablefuture.getNow(null);
 
             return either != null ? (String) either.map((levelchunk) -> {
                 return "done";
