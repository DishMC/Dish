diff --git a/minecraft/world/level/block/grower/TreeGrower.java b/minecraft/world/level/block/grower/TreeGrower.java
index 163c59e..f71a8d1 100644
--- a/minecraft/world/level/block/grower/TreeGrower.java
+++ b/minecraft/world/level/block/grower/TreeGrower.java
@@ -75,19 +75,19 @@ public final class TreeGrower {
             }
         }
 
-        return flag && this.flowers.isPresent() ? (ResourceKey) this.flowers.get() : (ResourceKey) this.tree.orElse((Object) null);
+        return flag && this.flowers.isPresent() ? (ResourceKey) this.flowers.get() : (ResourceKey) this.tree.orElse(null);
     }
 
     @Nullable
     private ResourceKey<ConfiguredFeature<?, ?>> getConfiguredMegaFeature(RandomSource randomsource) {
-        return this.secondaryMegaTree.isPresent() && randomsource.nextFloat() < this.secondaryChance ? (ResourceKey) this.secondaryMegaTree.get() : (ResourceKey) this.megaTree.orElse((Object) null);
+        return this.secondaryMegaTree.isPresent() && randomsource.nextFloat() < this.secondaryChance ? (ResourceKey) this.secondaryMegaTree.get() : (ResourceKey) this.megaTree.orElse(null);
     }
 
     public boolean growTree(ServerLevel serverlevel, ChunkGenerator chunkgenerator, BlockPos blockpos, BlockState blockstate, RandomSource randomsource) {
         ResourceKey<ConfiguredFeature<?, ?>> resourcekey = this.getConfiguredMegaFeature(randomsource);
 
         if (resourcekey != null) {
-            Holder<ConfiguredFeature<?, ?>> holder = (Holder) serverlevel.registryAccess().registryOrThrow(Registries.CONFIGURED_FEATURE).getHolder(resourcekey).orElse((Object) null);
+            Holder<ConfiguredFeature<?, ?>> holder = (Holder) serverlevel.registryAccess().registryOrThrow(Registries.CONFIGURED_FEATURE).getHolder(resourcekey).orElse(null);
 
             if (holder != null) {
                 for (int i = 0; i >= -1; --i) {
@@ -120,7 +120,7 @@ public final class TreeGrower {
         if (resourcekey1 == null) {
             return false;
         } else {
-            Holder<ConfiguredFeature<?, ?>> holder1 = (Holder) serverlevel.registryAccess().registryOrThrow(Registries.CONFIGURED_FEATURE).getHolder(resourcekey1).orElse((Object) null);
+            Holder<ConfiguredFeature<?, ?>> holder1 = (Holder) serverlevel.registryAccess().registryOrThrow(Registries.CONFIGURED_FEATURE).getHolder(resourcekey1).orElse(null);
 
             if (holder1 == null) {
                 return false;
@@ -166,13 +166,9 @@ public final class TreeGrower {
     }
 
     static {
-        Function function = (treegrower) -> {
+        CODEC = ExtraCodecs.stringResolverCodec((treegrower) -> {
             return treegrower.name;
-        };
-        Map map = TreeGrower.GROWERS;
-
-        Objects.requireNonNull(map);
-        CODEC = ExtraCodecs.stringResolverCodec(function, map::get);
+        }, TreeGrower.GROWERS::get);
         OAK = new TreeGrower("oak", 0.1F, Optional.empty(), Optional.empty(), Optional.of(TreeFeatures.OAK), Optional.of(TreeFeatures.FANCY_OAK), Optional.of(TreeFeatures.OAK_BEES_005), Optional.of(TreeFeatures.FANCY_OAK_BEES_005));
         SPRUCE = new TreeGrower("spruce", 0.5F, Optional.of(TreeFeatures.MEGA_SPRUCE), Optional.of(TreeFeatures.MEGA_PINE), Optional.of(TreeFeatures.SPRUCE), Optional.empty(), Optional.empty(), Optional.empty());
         MANGROVE = new TreeGrower("mangrove", 0.85F, Optional.empty(), Optional.empty(), Optional.of(TreeFeatures.MANGROVE), Optional.of(TreeFeatures.TALL_MANGROVE), Optional.empty(), Optional.empty());
