diff --git a/minecraft/world/level/gameevent/vibrations/VibrationSystem.java b/minecraft/world/level/gameevent/vibrations/VibrationSystem.java
index 17f6166..53e72f8 100644
--- a/minecraft/world/level/gameevent/vibrations/VibrationSystem.java
+++ b/minecraft/world/level/gameevent/vibrations/VibrationSystem.java
@@ -227,7 +227,7 @@ public interface VibrationSystem {
             if (vibrationsystem_user.requiresAdjacentChunksToBeTicking() && !areAdjacentChunksTicking(serverlevel, blockpos1)) {
                 return false;
             } else {
-                vibrationsystem_user.onReceiveVibration(serverlevel, blockpos, vibrationinfo.gameEvent(), (Entity) vibrationinfo.getEntity(serverlevel).orElse((Object) null), (Entity) vibrationinfo.getProjectileOwner(serverlevel).orElse((Object) null), VibrationSystem.Listener.distanceBetweenInBlocks(blockpos, blockpos1));
+                vibrationsystem_user.onReceiveVibration(serverlevel, blockpos, vibrationinfo.gameEvent(), (Entity) vibrationinfo.getEntity(serverlevel).orElse(null), (Entity) vibrationinfo.getProjectileOwner(serverlevel).orElse(null), VibrationSystem.Listener.distanceBetweenInBlocks(blockpos, blockpos1));
                 vibrationsystem_data.setCurrentVibration((VibrationInfo) null);
                 return true;
             }
@@ -336,7 +336,7 @@ public interface VibrationSystem {
             return instance.group(VibrationInfo.CODEC.optionalFieldOf("event").forGetter((vibrationsystem_data) -> {
                 return Optional.ofNullable(vibrationsystem_data.currentVibration);
             }), VibrationSelector.CODEC.fieldOf("selector").forGetter(VibrationSystem.Data::getSelectionStrategy), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("event_delay").orElse(0).forGetter(VibrationSystem.Data::getTravelTimeInTicks)).apply(instance, (optional, vibrationselector, integer) -> {
-                return new VibrationSystem.Data((VibrationInfo) optional.orElse((Object) null), vibrationselector, integer, true);
+                return new VibrationSystem.Data((VibrationInfo) optional.orElse(null), vibrationselector, integer, true);
             });
         });
         public static final String NBT_TAG_KEY = "listener";
