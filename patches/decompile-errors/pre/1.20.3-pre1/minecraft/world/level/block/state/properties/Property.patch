diff --git a/minecraft/world/level/block/state/properties/Property.java b/minecraft/world/level/block/state/properties/Property.java
index c80d201..6988870 100644
--- a/minecraft/world/level/block/state/properties/Property.java
+++ b/minecraft/world/level/block/state/properties/Property.java
@@ -21,7 +21,7 @@ public abstract class Property<T extends Comparable<T>> {
 
     protected Property(String s, Class<T> oclass) {
         this.codec = Codec.STRING.comapFlatMap((s1) -> {
-            return (DataResult) this.getValue(s1).map(DataResult::success).orElseGet(() -> {
+            return this.getValue(s1).map(DataResult::success).orElseGet(() -> {
                 return DataResult.error(() -> {
                     return "Unable to read property: " + this + " with value: " + s1;
                 });
@@ -98,18 +98,18 @@ public abstract class Property<T extends Comparable<T>> {
         DataResult<T> dataresult = this.codec.parse(dynamicops, u0);
 
         return dataresult.map((comparable) -> {
-            return (StateHolder) s0.setValue(this, comparable);
+            return s0.setValue(this, comparable);
         }).setPartial(s0);
     }
 
     public static record Value<T extends Comparable<T>> (Property<T> property, T value) {
 
-        public Value(Property<T> property, T t0) {
-            if (!property.getPossibleValues().contains(t0)) {
-                throw new IllegalArgumentException("Value " + t0 + " does not belong to property " + property);
+        public Value(Property<T> property, T value) {
+            if (!property.getPossibleValues().contains(value)) {
+                throw new IllegalArgumentException("Value " + value + " does not belong to property " + property);
             } else {
                 this.property = property;
-                this.value = t0;
+                this.value = value;
             }
         }
 
