diff --git a/minecraft/world/item/crafting/SimpleCookingSerializer.java b/minecraft/world/item/crafting/SimpleCookingSerializer.java
index ee87eb7..da1c6e5 100644
--- a/minecraft/world/item/crafting/SimpleCookingSerializer.java
+++ b/minecraft/world/item/crafting/SimpleCookingSerializer.java
@@ -17,7 +17,7 @@ public class SimpleCookingSerializer<T extends AbstractCookingRecipe> implements
     public SimpleCookingSerializer(AbstractCookingRecipe.Factory<T> abstractcookingrecipe_factory, int i) {
         this.factory = abstractcookingrecipe_factory;
         this.codec = RecordCodecBuilder.create((instance) -> {
-            P6 p6 = instance.group(ExtraCodecs.strictOptionalField(Codec.STRING, "group", "").forGetter((abstractcookingrecipe) -> {
+            return instance.group(ExtraCodecs.strictOptionalField(Codec.STRING, "group", "").forGetter((abstractcookingrecipe) -> {
                 return abstractcookingrecipe.group;
             }), CookingBookCategory.CODEC.fieldOf("category").orElse(CookingBookCategory.MISC).forGetter((abstractcookingrecipe) -> {
                 return abstractcookingrecipe.category;
@@ -29,10 +29,7 @@ public class SimpleCookingSerializer<T extends AbstractCookingRecipe> implements
                 return abstractcookingrecipe.experience;
             }), Codec.INT.fieldOf("cookingtime").orElse(i).forGetter((abstractcookingrecipe) -> {
                 return abstractcookingrecipe.cookingTime;
-            }));
-
-            Objects.requireNonNull(abstractcookingrecipe_factory);
-            return p6.apply(instance, abstractcookingrecipe_factory::create);
+            })).apply(instance, abstractcookingrecipe_factory::create);
         });
     }
 
