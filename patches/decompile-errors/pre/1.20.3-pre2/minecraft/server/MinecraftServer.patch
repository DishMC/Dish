diff --git a/minecraft/server/MinecraftServer.java b/minecraft/server/MinecraftServer.java
index 59dee9b..6d1aeae 100644
--- a/minecraft/server/MinecraftServer.java
+++ b/minecraft/server/MinecraftServer.java
@@ -267,7 +267,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             thread.setPriority(8);
         }
 
-        S s0 = (MinecraftServer) function.apply(thread);
+        S s0 = function.apply(thread);
 
         atomicreference.set(s0);
         thread.start();
@@ -696,7 +696,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             }
 
             this.nextTickTimeNanos = Util.getNanos();
-            this.statusIcon = (ServerStatus.Favicon) this.loadStatusIcon().orElse((Object) null);
+            this.statusIcon = (ServerStatus.Favicon) this.loadStatusIcon().orElse(null);
             this.status = this.buildServerStatus();
 
             while (this.running) {
@@ -850,7 +850,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
 
-    protected void doRunTask(TickTask ticktask) {
+    public void doRunTask(TickTask ticktask) {
         this.getProfiler().incrementCounter("runTask");
         super.doRunTask(ticktask);
     }
@@ -1466,7 +1466,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public CompletableFuture<Void> reloadResources(Collection<String> collection) {
         RegistryAccess.Frozen registryaccess_frozen = this.registries.getAccessForLoading(RegistryLayer.RELOADABLE);
         CompletableFuture<Void> completablefuture = CompletableFuture.supplyAsync(() -> {
-            Stream stream = collection.stream();
+            Stream<String> stream = collection.stream();
             PackRepository packrepository = this.packRepository;
 
             Objects.requireNonNull(this.packRepository);
@@ -1749,7 +1749,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             GameRules.visitGameRuleTypes(new GameRules.GameRuleTypeVisitor() {
                 @Override
-                public <T extends GameRules.Value<T>> void visit(GameRules.Key<T> gamerules_key, GameRules.Type<T> gamerules_type) {
+                public <T extends GameRules.Value<T>> void visit(GameRules.Key<?> gamerules_key, GameRules.Type<?> gamerules_type) {
                     list.add(String.format(Locale.ROOT, "%s=%s\n", gamerules_key.getId(), gamerules.getRule(gamerules_key)));
                 }
             });
@@ -1853,7 +1853,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             try {
                 label51:
                 {
-                    ArrayList arraylist;
+                    ArrayList<NativeModuleLister.NativeModuleInfo> arraylist;
 
                     try {
                         arraylist = Lists.newArrayList(NativeModuleLister.listModules());
