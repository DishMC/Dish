diff --git a/minecraft/world/entity/monster/warden/Warden.java b/minecraft/world/entity/monster/warden/Warden.java
index 7d9c064..ec9dd02 100644
--- a/minecraft/world/entity/monster/warden/Warden.java
+++ b/minecraft/world/entity/monster/warden/Warden.java
@@ -14,6 +14,7 @@ import net.minecraft.core.particles.BlockParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.Tag;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
@@ -373,7 +374,7 @@ public class Warden extends Monster implements VibrationSystem {
 
     @Override
     public Brain<Warden> getBrain() {
-        return super.getBrain();
+        return (Brain<Warden>) super.getBrain();
     }
 
     @Override
@@ -420,7 +421,7 @@ public class Warden extends Monster implements VibrationSystem {
     @Override
     public void addAdditionalSaveData(CompoundTag compoundtag) {
         super.addAdditionalSaveData(compoundtag);
-        DataResult dataresult = AngerManagement.codec(this::canTargetEntity).encodeStart(NbtOps.INSTANCE, this.angerManagement);
+        DataResult<Tag> dataresult = AngerManagement.codec(this::canTargetEntity).encodeStart(NbtOps.INSTANCE, this.angerManagement);
         Logger logger = Warden.LOGGER;
 
         Objects.requireNonNull(logger);
@@ -438,24 +439,16 @@ public class Warden extends Monster implements VibrationSystem {
     @Override
     public void readAdditionalSaveData(CompoundTag compoundtag) {
         super.readAdditionalSaveData(compoundtag);
-        DataResult dataresult;
-        Logger logger;
 
         if (compoundtag.contains("anger")) {
-            dataresult = AngerManagement.codec(this::canTargetEntity).parse(new Dynamic(NbtOps.INSTANCE, compoundtag.get("anger")));
-            logger = Warden.LOGGER;
-            Objects.requireNonNull(logger);
-            dataresult.resultOrPartial(logger::error).ifPresent((angermanagement) -> {
+            AngerManagement.codec(this::canTargetEntity).parse(new Dynamic<>(NbtOps.INSTANCE, compoundtag.get("anger"))).resultOrPartial(Warden.LOGGER::error).ifPresent((angermanagement) -> {
                 this.angerManagement = angermanagement;
             });
             this.syncClientAngerLevel();
         }
 
         if (compoundtag.contains("listener", 10)) {
-            dataresult = VibrationSystem.Data.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundtag.getCompound("listener")));
-            logger = Warden.LOGGER;
-            Objects.requireNonNull(logger);
-            dataresult.resultOrPartial(logger::error).ifPresent((vibrationsystem_data) -> {
+            VibrationSystem.Data.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compoundtag.getCompound("listener"))).resultOrPartial(Warden.LOGGER::error).ifPresent((vibrationsystem_data) -> {
                 this.vibrationData = vibrationsystem_data;
             });
         }
@@ -489,7 +482,7 @@ public class Warden extends Monster implements VibrationSystem {
     public void increaseAngerAt(@Nullable Entity entity, int i, boolean flag) {
         if (!this.isNoAi() && this.canTargetEntity(entity)) {
             WardenAi.setDigCooldown(this);
-            boolean flag1 = !(this.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).orElse((Object) null) instanceof Player);
+            boolean flag1 = !(this.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null) instanceof Player);
             int j = this.angerManagement.increaseAnger(entity, i);
 
             if (entity instanceof Player && flag1 && AngerLevel.byAnger(j).isAngry()) {
@@ -510,7 +503,7 @@ public class Warden extends Monster implements VibrationSystem {
     @Nullable
     @Override
     public LivingEntity getTarget() {
-        return (LivingEntity) this.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).orElse((Object) null);
+        return (LivingEntity) this.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null);
     }
 
     @Override
@@ -553,7 +546,7 @@ public class Warden extends Monster implements VibrationSystem {
 
     public void setAttackTarget(LivingEntity livingentity) {
         this.getBrain().eraseMemory(MemoryModuleType.ROAR_TARGET);
-        this.getBrain().setMemory(MemoryModuleType.ATTACK_TARGET, (Object) livingentity);
+        this.getBrain().setMemory(MemoryModuleType.ATTACK_TARGET, livingentity);
         this.getBrain().eraseMemory(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
         SonicBoom.setCooldown(this, 200);
     }
