diff --git a/minecraft/world/level/chunk/storage/IOWorker.java b/minecraft/world/level/chunk/storage/IOWorker.java
index 34e8506..577f7e9 100644
--- a/minecraft/world/level/chunk/storage/IOWorker.java
+++ b/minecraft/world/level/chunk/storage/IOWorker.java
@@ -174,7 +174,7 @@ public class IOWorker implements ChunkScanAccess, AutoCloseable {
             return this.submitTask(() -> {
                 try {
                     this.storage.flush();
-                    return Either.left((Object) null);
+                    return Either.left(null);
                 } catch (Exception exception) {
                     IOWorker.LOGGER.warn("Failed to synchronize chunks", exception);
                     return Either.right(exception);
@@ -182,7 +182,7 @@ public class IOWorker implements ChunkScanAccess, AutoCloseable {
             });
         }) : completablefuture.thenCompose((ovoid) -> {
             return this.submitTask(() -> {
-                return Either.left((Object) null);
+                return Either.left(null);
             });
         });
     }
@@ -201,7 +201,7 @@ public class IOWorker implements ChunkScanAccess, AutoCloseable {
                     this.storage.scanChunk(chunkpos, streamtagvisitor);
                 }
 
-                return Either.left((Object) null);
+                return Either.left(null);
             } catch (Exception exception) {
                 IOWorker.LOGGER.warn("Failed to bulk scan chunk {}", chunkpos, exception);
                 return Either.right(exception);
@@ -239,7 +239,7 @@ public class IOWorker implements ChunkScanAccess, AutoCloseable {
     private void runStore(ChunkPos chunkpos, IOWorker.PendingStore ioworker_pendingstore) {
         try {
             this.storage.write(chunkpos, ioworker_pendingstore.data);
-            ioworker_pendingstore.result.complete((Object) null);
+            ioworker_pendingstore.result.complete(null);
         } catch (Exception exception) {
             IOWorker.LOGGER.error("Failed to store chunk {}", chunkpos, exception);
             ioworker_pendingstore.result.completeExceptionally(exception);
