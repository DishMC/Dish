diff --git a/minecraft/nbt/NbtUtils.java b/minecraft/nbt/NbtUtils.java
index 94e0480..b21b900 100644
--- a/minecraft/nbt/NbtUtils.java
+++ b/minecraft/nbt/NbtUtils.java
@@ -47,14 +47,14 @@ import org.slf4j.Logger;
 
 public final class NbtUtils {
 
-    private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.comparingInt((listtag) -> {
+    private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.<ListTag>comparingInt((listtag) -> {
         return listtag.getInt(1);
     }).thenComparingInt((listtag) -> {
         return listtag.getInt(0);
     }).thenComparingInt((listtag) -> {
         return listtag.getInt(2);
     });
-    private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.comparingDouble((listtag) -> {
+    private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.<ListTag>comparingDouble((listtag) -> {
         return listtag.getDouble(1);
     }).thenComparingDouble((listtag) -> {
         return listtag.getDouble(0);
@@ -296,7 +296,7 @@ public final class NbtUtils {
         Optional<T> optional = net_minecraft_world_level_block_state_properties_property.getValue(compoundtag.getString(s));
 
         if (optional.isPresent()) {
-            return (StateHolder) s0.setValue(net_minecraft_world_level_block_state_properties_property, (Comparable) optional.get());
+            return s0.setValue(net_minecraft_world_level_block_state_properties_property, optional.get());
         } else {
             NbtUtils.LOGGER.warn("Unable to read property: {} with value: {} for blockstate: {}", new Object[]{s, compoundtag.getString(s), compoundtag1});
             return s0;
@@ -350,7 +350,7 @@ public final class NbtUtils {
     }
 
     private static <T extends Comparable<T>> String getName(net.minecraft.world.level.block.state.properties.Property<T> net_minecraft_world_level_block_state_properties_property, Comparable<?> comparable) {
-        return net_minecraft_world_level_block_state_properties_property.getName(comparable);
+        return net_minecraft_world_level_block_state_properties_property.getName((T) comparable);
     }
 
     public static String prettyPrint(Tag tag) {
@@ -596,7 +596,7 @@ public final class NbtUtils {
             listtag = compoundtag.getList("palette", 10);
         }
 
-        Stream stream = listtag.stream();
+        Stream<Tag> stream = listtag.stream();
 
         Objects.requireNonNull(CompoundTag.class);
         ListTag listtag1 = (ListTag) stream.map(CompoundTag.class::cast).map(NbtUtils::packBlockState).map(StringTag::valueOf).collect(Collectors.toCollection(ListTag::new));
@@ -610,6 +610,7 @@ public final class NbtUtils {
             listtag3 = compoundtag.getList("palettes", 9);
             stream = listtag3.stream();
             Objects.requireNonNull(ListTag.class);
+            ListTag finalListtag = listtag2;
             stream.map(ListTag.class::cast).forEach((listtag4) -> {
                 CompoundTag compoundtag1 = new CompoundTag();
 
@@ -617,7 +618,7 @@ public final class NbtUtils {
                     compoundtag1.putString(listtag1.getString(i), packBlockState(listtag4.getCompound(i)));
                 }
 
-                listtag2.add(compoundtag1);
+                finalListtag.add(compoundtag1);
             });
             compoundtag.put("palettes", listtag2);
         }
@@ -647,17 +648,17 @@ public final class NbtUtils {
     @VisibleForTesting
     static CompoundTag unpackStructureTemplate(CompoundTag compoundtag) {
         ListTag listtag = compoundtag.getList("palette", 8);
-        Stream stream = listtag.stream();
+        Stream<Tag> stream = listtag.stream();
 
         Objects.requireNonNull(StringTag.class);
         Map<String, Tag> map = (Map) stream.map(StringTag.class::cast).map(StringTag::getAsString).collect(ImmutableMap.toImmutableMap(Function.identity(), NbtUtils::unpackBlockState));
 
         if (compoundtag.contains("palettes", 9)) {
-            Stream stream1 = compoundtag.getList("palettes", 10).stream();
+            Stream<Tag> stream1 = compoundtag.getList("palettes", 10).stream();
 
             Objects.requireNonNull(CompoundTag.class);
             compoundtag.put("palettes", (Tag) stream1.map(CompoundTag.class::cast).map((compoundtag1) -> {
-                Stream stream2 = map.keySet().stream();
+                Stream<String> stream2 = map.keySet().stream();
 
                 Objects.requireNonNull(compoundtag1);
                 return (ListTag) stream2.map(compoundtag1::getString).map(NbtUtils::unpackBlockState).collect(Collectors.toCollection(ListTag::new));
