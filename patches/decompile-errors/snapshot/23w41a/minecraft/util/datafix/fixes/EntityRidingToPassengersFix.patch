diff --git a/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java b/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
index ae891f3..a5f7bb7 100644
--- a/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
+++ b/minecraft/util/datafix/fixes/EntityRidingToPassengersFix.java
@@ -52,7 +52,7 @@ public class EntityRidingToPassengersFix extends DataFix {
             return TypeRewriteRule.seq(this.fixTypeEverywhere("EntityRidingToPassengerFix", type3, type4, (dynamicops) -> {
                 return (pair) -> {
                     Optional<Pair<String, Pair<Either<List<NewEntityTree>, Unit>, Entity>>> optional = Optional.empty();
-                    Pair pair1 = pair;
+                    Pair<String, Pair<Either<OldEntityTree, Unit>, Entity>> pair1 = pair;
 
                     while (true) {
                         Either<List<NewEntityTree>, Unit> either = (Either) DataFixUtils.orElse(optional.map((pair2) -> {
@@ -66,7 +66,7 @@ public class EntityRidingToPassengersFix extends DataFix {
                             return Either.left(ImmutableList.of(newentitytree));
                         }), Either.right(DSL.unit()));
 
-                        optional = Optional.of(Pair.of(References.ENTITY_TREE.typeName(), Pair.of(either, ((Pair) pair1.getSecond()).getSecond())));
+                        optional = Optional.of(Pair.of(References.ENTITY_TREE.typeName(), Pair.of(either, pair1.getSecond().getSecond())));
                         Optional<OldEntityTree> optional1 = ((Either) ((Pair) pair1.getSecond()).getFirst()).left();
 
                         if (optional1.isEmpty()) {
@@ -75,7 +75,7 @@ public class EntityRidingToPassengersFix extends DataFix {
                             });
                         }
 
-                        pair1 = (Pair) (new Typed(type, dynamicops, optional1.get())).getOptional(opticfinder).orElseThrow(() -> {
+                        pair1 = (Pair) (new Typed<>(type, dynamicops, optional1.get())).getOptional(opticfinder).orElseThrow(() -> {
                             return new IllegalStateException("Should always have an entity here");
                         });
                     }
