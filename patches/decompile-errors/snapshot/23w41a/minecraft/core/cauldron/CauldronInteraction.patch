diff --git a/minecraft/core/cauldron/CauldronInteraction.java b/minecraft/core/cauldron/CauldronInteraction.java
index b04053b..983b7fb 100644
--- a/minecraft/core/cauldron/CauldronInteraction.java
+++ b/minecraft/core/cauldron/CauldronInteraction.java
@@ -36,17 +36,89 @@ import net.minecraft.world.level.gameevent.GameEvent;
 public interface CauldronInteraction {
 
     Map<String, CauldronInteraction.InteractionMap> INTERACTIONS = new Object2ObjectArrayMap();
-    Codec<CauldronInteraction.InteractionMap> CODEC;
-    CauldronInteraction.InteractionMap EMPTY;
-    CauldronInteraction.InteractionMap WATER;
-    CauldronInteraction.InteractionMap LAVA;
-    CauldronInteraction.InteractionMap POWDER_SNOW;
-    CauldronInteraction FILL_WATER;
-    CauldronInteraction FILL_LAVA;
-    CauldronInteraction FILL_POWDER_SNOW;
-    CauldronInteraction SHULKER_BOX;
-    CauldronInteraction BANNER;
-    CauldronInteraction DYED_ITEM;
+    Codec<CauldronInteraction.InteractionMap> CODEC = ExtraCodecs.stringResolverCodec(CauldronInteraction.InteractionMap::name, CauldronInteraction.INTERACTIONS::get);
+    CauldronInteraction.InteractionMap EMPTY = newInteractionMap("empty");
+    CauldronInteraction.InteractionMap WATER = newInteractionMap("water");
+    CauldronInteraction.InteractionMap LAVA = newInteractionMap("lava");
+    CauldronInteraction.InteractionMap POWDER_SNOW = newInteractionMap("powder_snow");
+    CauldronInteraction FILL_WATER = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
+        return emptyBucket(level, blockpos, player, interactionhand, itemstack, (BlockState) Blocks.WATER_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY);
+    };;
+    CauldronInteraction FILL_LAVA = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
+        return emptyBucket(level, blockpos, player, interactionhand, itemstack, Blocks.LAVA_CAULDRON.defaultBlockState(), SoundEvents.BUCKET_EMPTY_LAVA);
+    };;
+    CauldronInteraction FILL_POWDER_SNOW = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
+        return emptyBucket(level, blockpos, player, interactionhand, itemstack, (BlockState) Blocks.POWDER_SNOW_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY_POWDER_SNOW);
+    };;
+    CauldronInteraction SHULKER_BOX = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
+        Block block = Block.byItem(itemstack.getItem());
+
+        if (!(block instanceof ShulkerBoxBlock)) {
+            return InteractionResult.PASS;
+        } else {
+            if (!level.isClientSide) {
+                ItemStack itemstack1 = new ItemStack(Blocks.SHULKER_BOX);
+
+                if (itemstack.hasTag()) {
+                    itemstack1.setTag(itemstack.getTag().copy());
+                }
+
+                player.setItemInHand(interactionhand, itemstack1);
+                player.awardStat(Stats.CLEAN_SHULKER_BOX);
+                LayeredCauldronBlock.lowerFillLevel(blockstate, level, blockpos);
+            }
+
+            return InteractionResult.sidedSuccess(level.isClientSide);
+        }
+    };;
+    CauldronInteraction BANNER = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
+        if (BannerBlockEntity.getPatternCount(itemstack) <= 0) {
+            return InteractionResult.PASS;
+        } else {
+            if (!level.isClientSide) {
+                ItemStack itemstack1 = itemstack.copyWithCount(1);
+
+                BannerBlockEntity.removeLastPattern(itemstack1);
+                if (!player.getAbilities().instabuild) {
+                    itemstack.shrink(1);
+                }
+
+                if (itemstack.isEmpty()) {
+                    player.setItemInHand(interactionhand, itemstack1);
+                } else if (player.getInventory().add(itemstack1)) {
+                    player.inventoryMenu.sendAllDataToRemote();
+                } else {
+                    player.drop(itemstack1, false);
+                }
+
+                player.awardStat(Stats.CLEAN_BANNER);
+                LayeredCauldronBlock.lowerFillLevel(blockstate, level, blockpos);
+            }
+
+            return InteractionResult.sidedSuccess(level.isClientSide);
+        }
+    };;
+    CauldronInteraction DYED_ITEM = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
+        Item item = itemstack.getItem();
+
+        if (!(item instanceof DyeableLeatherItem)) {
+            return InteractionResult.PASS;
+        } else {
+            DyeableLeatherItem dyeableleatheritem = (DyeableLeatherItem) item;
+
+            if (!dyeableleatheritem.hasCustomColor(itemstack)) {
+                return InteractionResult.PASS;
+            } else {
+                if (!level.isClientSide) {
+                    dyeableleatheritem.clearColor(itemstack);
+                    player.awardStat(Stats.CLEAN_ARMOR);
+                    LayeredCauldronBlock.lowerFillLevel(blockstate, level, blockpos);
+                }
+
+                return InteractionResult.sidedSuccess(level.isClientSide);
+            }
+        }
+    };;
 
     static CauldronInteraction.InteractionMap newInteractionMap(String s) {
         Object2ObjectOpenHashMap<Item, CauldronInteraction> object2objectopenhashmap = new Object2ObjectOpenHashMap();
@@ -217,96 +289,6 @@ public interface CauldronInteraction {
         return InteractionResult.sidedSuccess(level.isClientSide);
     }
 
-    static {
-        Function function = CauldronInteraction.InteractionMap::name;
-        Map map = CauldronInteraction.INTERACTIONS;
-
-        Objects.requireNonNull(map);
-        CODEC = ExtraCodecs.stringResolverCodec(function, map::get);
-        EMPTY = newInteractionMap("empty");
-        WATER = newInteractionMap("water");
-        LAVA = newInteractionMap("lava");
-        POWDER_SNOW = newInteractionMap("powder_snow");
-        FILL_WATER = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            return emptyBucket(level, blockpos, player, interactionhand, itemstack, (BlockState) Blocks.WATER_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY);
-        };
-        FILL_LAVA = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            return emptyBucket(level, blockpos, player, interactionhand, itemstack, Blocks.LAVA_CAULDRON.defaultBlockState(), SoundEvents.BUCKET_EMPTY_LAVA);
-        };
-        FILL_POWDER_SNOW = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            return emptyBucket(level, blockpos, player, interactionhand, itemstack, (BlockState) Blocks.POWDER_SNOW_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY_POWDER_SNOW);
-        };
-        SHULKER_BOX = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            Block block = Block.byItem(itemstack.getItem());
-
-            if (!(block instanceof ShulkerBoxBlock)) {
-                return InteractionResult.PASS;
-            } else {
-                if (!level.isClientSide) {
-                    ItemStack itemstack1 = new ItemStack(Blocks.SHULKER_BOX);
-
-                    if (itemstack.hasTag()) {
-                        itemstack1.setTag(itemstack.getTag().copy());
-                    }
-
-                    player.setItemInHand(interactionhand, itemstack1);
-                    player.awardStat(Stats.CLEAN_SHULKER_BOX);
-                    LayeredCauldronBlock.lowerFillLevel(blockstate, level, blockpos);
-                }
-
-                return InteractionResult.sidedSuccess(level.isClientSide);
-            }
-        };
-        BANNER = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            if (BannerBlockEntity.getPatternCount(itemstack) <= 0) {
-                return InteractionResult.PASS;
-            } else {
-                if (!level.isClientSide) {
-                    ItemStack itemstack1 = itemstack.copyWithCount(1);
-
-                    BannerBlockEntity.removeLastPattern(itemstack1);
-                    if (!player.getAbilities().instabuild) {
-                        itemstack.shrink(1);
-                    }
-
-                    if (itemstack.isEmpty()) {
-                        player.setItemInHand(interactionhand, itemstack1);
-                    } else if (player.getInventory().add(itemstack1)) {
-                        player.inventoryMenu.sendAllDataToRemote();
-                    } else {
-                        player.drop(itemstack1, false);
-                    }
-
-                    player.awardStat(Stats.CLEAN_BANNER);
-                    LayeredCauldronBlock.lowerFillLevel(blockstate, level, blockpos);
-                }
-
-                return InteractionResult.sidedSuccess(level.isClientSide);
-            }
-        };
-        DYED_ITEM = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            Item item = itemstack.getItem();
-
-            if (!(item instanceof DyeableLeatherItem)) {
-                return InteractionResult.PASS;
-            } else {
-                DyeableLeatherItem dyeableleatheritem = (DyeableLeatherItem) item;
-
-                if (!dyeableleatheritem.hasCustomColor(itemstack)) {
-                    return InteractionResult.PASS;
-                } else {
-                    if (!level.isClientSide) {
-                        dyeableleatheritem.clearColor(itemstack);
-                        player.awardStat(Stats.CLEAN_ARMOR);
-                        LayeredCauldronBlock.lowerFillLevel(blockstate, level, blockpos);
-                    }
-
-                    return InteractionResult.sidedSuccess(level.isClientSide);
-                }
-            }
-        };
-    }
-
     public static record InteractionMap(String name, Map<Item, CauldronInteraction> map) {
 
     }
