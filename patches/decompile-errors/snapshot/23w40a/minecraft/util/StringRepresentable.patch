diff --git a/minecraft/util/StringRepresentable.java b/minecraft/util/StringRepresentable.java
index c191681..d3b24db 100644
--- a/minecraft/util/StringRepresentable.java
+++ b/minecraft/util/StringRepresentable.java
@@ -29,14 +29,14 @@ public interface StringRepresentable {
     }
 
     static <E extends Enum<E> & StringRepresentable> StringRepresentable.EnumCodec<E> fromEnumWithMapping(Supplier<E[]> supplier, Function<String, String> function) {
-        E[] ae = (Enum[]) supplier.get();
+        E[] ae = supplier.get();
         Function<String, E> function1 = createNameLookup(ae, function);
 
         return new StringRepresentable.EnumCodec<>(ae, function1);
     }
 
     static <T extends StringRepresentable> Codec<T> fromValues(Supplier<T[]> supplier) {
-        T[] at = (StringRepresentable[]) supplier.get();
+        T[] at = supplier.get();
         Function<String, T> function = createNameLookup(at, (s) -> {
             return s;
         });
@@ -47,14 +47,14 @@ public interface StringRepresentable {
 
     static <T extends StringRepresentable> Function<String, T> createNameLookup(T[] at, Function<String, String> function) {
         if (at.length > 16) {
-            Map<String, T> map = (Map) Arrays.stream(at).collect(Collectors.toMap((stringrepresentable) -> {
+            Map<String, T> map = Arrays.stream(at).collect(Collectors.toMap((stringrepresentable) -> {
                 return (String) function.apply(stringrepresentable.getSerializedName());
             }, (stringrepresentable) -> {
                 return stringrepresentable;
             }));
 
             return (s) -> {
-                return s == null ? null : (StringRepresentable) map.get(s);
+                return s == null ? null : map.get(s);
             };
         } else {
             return (s) -> {
@@ -62,7 +62,7 @@ public interface StringRepresentable {
                 int i = at.length;
 
                 for (int j = 0; j < i; ++j) {
-                    T t0 = astringrepresentable[j];
+                    T t0 = (T) astringrepresentable[j];
 
                     if (((String) function.apply(t0.getSerializedName())).equals(s)) {
                         return t0;
@@ -77,7 +77,7 @@ public interface StringRepresentable {
     static Keyable keys(final StringRepresentable[] astringrepresentable) {
         return new Keyable() {
             public <T> Stream<T> keys(DynamicOps<T> dynamicops) {
-                Stream stream = Arrays.stream(astringrepresentable).map(StringRepresentable::getSerializedName);
+                Stream<String> stream = Arrays.stream(astringrepresentable).map(StringRepresentable::getSerializedName);
 
                 Objects.requireNonNull(dynamicops);
                 return stream.map(dynamicops::createString);
@@ -100,11 +100,11 @@ public interface StringRepresentable {
 
         @Nullable
         public E byName(@Nullable String s) {
-            return (Enum) this.resolver.apply(s);
+            return this.resolver.apply(s);
         }
 
         public E byName(@Nullable String s, E e0) {
-            return (Enum) Objects.requireNonNullElse(this.byName(s), e0);
+            return Objects.requireNonNullElse(this.byName(s), e0);
         }
     }
 
