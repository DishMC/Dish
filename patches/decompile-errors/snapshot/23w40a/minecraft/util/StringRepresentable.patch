diff --git a/minecraft/util/StringRepresentable.java b/minecraft/util/StringRepresentable.java
index 4a51722..8158cdb 100644
--- a/minecraft/util/StringRepresentable.java
+++ b/minecraft/util/StringRepresentable.java
@@ -27,7 +27,7 @@ public interface StringRepresentable {
     }
 
     static <E extends Enum<E> & StringRepresentable> StringRepresentable.EnumCodec<E> fromEnumWithMapping(Supplier<E[]> supplier, Function<String, String> function) {
-        E[] ae = (Enum[]) supplier.get();
+        E[] ae = supplier.get();
 
         if (ae.length > 16) {
             Map<String, E> map = (Map) Arrays.stream(ae).collect(Collectors.toMap((oenum) -> {
@@ -37,7 +37,7 @@ public interface StringRepresentable {
             }));
 
             return new StringRepresentable.EnumCodec<>(ae, (s) -> {
-                return s == null ? null : (Enum) map.get(s);
+                return s == null ? null : map.get(s);
             });
         } else {
             return new StringRepresentable.EnumCodec<>(ae, (s) -> {
@@ -45,7 +45,7 @@ public interface StringRepresentable {
                 int i = ae.length;
 
                 for (int j = 0; j < i; ++j) {
-                    E e0 = aenum[j];
+                    E e0 = (E) aenum[j];
 
                     if (((String) function.apply(((StringRepresentable) e0).getSerializedName())).equals(s)) {
                         return e0;
@@ -60,7 +60,7 @@ public interface StringRepresentable {
     static Keyable keys(final StringRepresentable[] astringrepresentable) {
         return new Keyable() {
             public <T> Stream<T> keys(DynamicOps<T> dynamicops) {
-                Stream stream = Arrays.stream(astringrepresentable).map(StringRepresentable::getSerializedName);
+                Stream<String> stream = Arrays.stream(astringrepresentable).map(StringRepresentable::getSerializedName);
 
                 Objects.requireNonNull(dynamicops);
                 return stream.map(dynamicops::createString);
@@ -96,11 +96,11 @@ public interface StringRepresentable {
 
         @Nullable
         public E byName(@Nullable String s) {
-            return (Enum) this.resolver.apply(s);
+            return this.resolver.apply(s);
         }
 
         public E byName(@Nullable String s, E e0) {
-            return (Enum) Objects.requireNonNullElse(this.byName(s), e0);
+            return Objects.requireNonNullElse(this.byName(s), e0);
         }
     }
 }
