diff --git a/minecraft/world/level/block/state/StateHolder.java b/minecraft/world/level/block/state/StateHolder.java
index 41a8197..2fc893d 100644
--- a/minecraft/world/level/block/state/StateHolder.java
+++ b/minecraft/world/level/block/state/StateHolder.java
@@ -36,7 +36,7 @@ public abstract class StateHolder<O, S> {
         }
 
         private <T extends Comparable<T>> String getName(Property<T> property, Comparable<?> comparable) {
-            return property.getName(comparable);
+            return property.getName((T) comparable);
         }
     };
     protected final O owner;
@@ -51,7 +51,7 @@ public abstract class StateHolder<O, S> {
     }
 
     public <T extends Comparable<T>> S cycle(Property<T> property) {
-        return this.setValue(property, (Comparable) findNextInCollection(property.getPossibleValues(), this.getValue(property)));
+        return this.setValue(property, findNextInCollection(property.getPossibleValues(), this.getValue(property)));
     }
 
     protected static <T> T findNextInCollection(Collection<T> collection, T t0) {
@@ -59,12 +59,12 @@ public abstract class StateHolder<O, S> {
 
         do {
             if (!iterator.hasNext()) {
-                return iterator.next();
+                return (T) iterator.next();
             }
         } while (!iterator.next().equals(t0));
 
         if (iterator.hasNext()) {
-            return iterator.next();
+            return (T) iterator.next();
         } else {
             return collection.iterator().next();
         }
@@ -97,14 +97,14 @@ public abstract class StateHolder<O, S> {
         if (comparable == null) {
             throw new IllegalArgumentException("Cannot get property " + property + " as it does not exist in " + this.owner);
         } else {
-            return (Comparable) property.getValueClass().cast(comparable);
+            return property.getValueClass().cast(comparable);
         }
     }
 
     public <T extends Comparable<T>> Optional<T> getOptionalValue(Property<T> property) {
         Comparable<?> comparable = (Comparable) this.values.get(property);
 
-        return comparable == null ? Optional.empty() : Optional.of((Comparable) property.getValueClass().cast(comparable));
+        return comparable == null ? Optional.empty() : Optional.of(property.getValueClass().cast(comparable));
     }
 
     public <T extends Comparable<T>, V extends T> S setValue(Property<T> property, V v0) {
@@ -113,7 +113,7 @@ public abstract class StateHolder<O, S> {
         if (comparable == null) {
             throw new IllegalArgumentException("Cannot set property " + property + " as it does not exist in " + this.owner);
         } else if (comparable.equals(v0)) {
-            return this;
+            return (S) this;
         } else {
             S s0 = this.neighbours.get(property, v0);
 
@@ -137,7 +137,7 @@ public abstract class StateHolder<O, S> {
                 return s0;
             }
         } else {
-            return this;
+            return (S) this;
         }
     }
 
@@ -181,10 +181,10 @@ public abstract class StateHolder<O, S> {
         return codec.dispatch("Name", (stateholder) -> {
             return stateholder.owner;
         }, (object) -> {
-            S s0 = (StateHolder) function.apply(object);
+            S s0 = function.apply(object);
 
             return s0.getValues().isEmpty() ? Codec.unit(s0) : s0.propertiesCodec.codec().optionalFieldOf("Properties").xmap((optional) -> {
-                return (StateHolder) optional.orElse(s0);
+                return optional.orElse(s0);
             }, Optional::of).codec();
         });
     }
