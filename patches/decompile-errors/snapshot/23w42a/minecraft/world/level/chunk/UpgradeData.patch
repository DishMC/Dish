diff --git a/minecraft/world/level/chunk/UpgradeData.java b/minecraft/world/level/chunk/UpgradeData.java
index d38e62f..4fa3bd0 100644
--- a/minecraft/world/level/chunk/UpgradeData.java
+++ b/minecraft/world/level/chunk/UpgradeData.java
@@ -110,7 +110,7 @@ public class UpgradeData {
 
             while (iterator.hasNext()) {
                 Tag tag = (Tag) iterator.next();
-                Optional optional = SavedTick.loadTick((CompoundTag) tag, function);
+                Optional<SavedTick<T>> optional = SavedTick.loadTick((CompoundTag) tag, function);
 
                 Objects.requireNonNull(list);
                 optional.ifPresent(list::add);
@@ -295,8 +295,9 @@ public class UpgradeData {
 
         if (!this.neighborBlockTicks.isEmpty()) {
             listtag = new ListTag();
+            ListTag finalListtag = listtag;
             this.neighborBlockTicks.forEach((savedtick) -> {
-                listtag.add(savedtick.save((block) -> {
+                finalListtag.add(savedtick.save((block) -> {
                     return BuiltInRegistries.BLOCK.getKey(block).toString();
                 }));
             });
@@ -305,8 +306,9 @@ public class UpgradeData {
 
         if (!this.neighborFluidTicks.isEmpty()) {
             listtag = new ListTag();
+            ListTag finalListtag1 = listtag;
             this.neighborFluidTicks.forEach((savedtick) -> {
-                listtag.add(savedtick.save((fluid) -> {
+                finalListtag1.add(savedtick.save((fluid) -> {
                     return BuiltInRegistries.FLUID.getKey(fluid).toString();
                 }));
             });
@@ -399,7 +401,7 @@ public class UpgradeData {
                         if ((Integer) blockstate.getValue(BlockStateProperties.DISTANCE) >= j) {
                             levelaccessor.setBlock(blockpos, (BlockState) blockstate.setValue(BlockStateProperties.DISTANCE, j), 18);
                             if (i != 7) {
-                                Direction[] adirection = null.DIRECTIONS;
+                                Direction[] adirection = DIRECTIONS;
                                 int k = adirection.length;
 
                                 for (int l = 0; l < k; ++l) {
