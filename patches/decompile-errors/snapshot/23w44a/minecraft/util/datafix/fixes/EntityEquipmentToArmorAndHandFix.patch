diff --git a/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java b/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
index e17a469..57329e5 100644
--- a/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
+++ b/minecraft/util/datafix/fixes/EntityEquipmentToArmorAndHandFix.java
@@ -41,16 +41,16 @@ public class EntityEquipmentToArmorAndHandFix extends DataFix {
 
             if (optional.isPresent()) {
                 List<IS> list = (List) optional.get();
-                IS is = ((Pair) type.read(dynamic.emptyMap()).result().orElseThrow(() -> {
+                IS is = (type.read(dynamic.emptyMap()).result().orElseThrow(() -> {
                     return new IllegalStateException("Could not parse newly created empty itemstack.");
                 })).getFirst();
 
                 if (!list.isEmpty()) {
-                    either = Either.left(Lists.newArrayList(new Object[]{list.get(0), is}));
+                    either = Either.left((List<IS>) Lists.newArrayList(new Object[]{list.get(0), is}));
                 }
 
                 if (list.size() > 1) {
-                    List<IS> list1 = Lists.newArrayList(new Object[]{is, is, is, is});
+                    List<IS> list1 = (List<IS>) Lists.newArrayList(new Object[]{is, is, is, is});
 
                     for (int i = 1; i < Math.min(list.size(), 5); ++i) {
                         list1.set(i - 1, list.get(i));
@@ -63,11 +63,12 @@ public class EntityEquipmentToArmorAndHandFix extends DataFix {
             Optional<? extends Stream<? extends Dynamic<?>>> optional1 = dynamic.get("DropChances").asStreamOpt().result();
 
             if (optional1.isPresent()) {
+                Dynamic<?> finalDynamic = dynamic;
                 Iterator<? extends Dynamic<?>> iterator = Stream.concat((Stream) optional1.get(), Stream.generate(() -> {
-                    return dynamic.createInt(0);
+                    return finalDynamic.createInt(0);
                 })).iterator();
                 float f = ((Dynamic) iterator.next()).asFloat(0.0F);
-                Stream stream;
+                Stream<Float> stream;
                 Dynamic dynamic1;
 
                 if (dynamic.get("HandDropChances").result().isEmpty()) {
