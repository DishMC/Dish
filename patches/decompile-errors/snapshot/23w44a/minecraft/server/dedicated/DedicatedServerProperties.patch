diff --git a/minecraft/server/dedicated/DedicatedServerProperties.java b/minecraft/server/dedicated/DedicatedServerProperties.java
index 26cc593..b0f0cb8 100644
--- a/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -249,10 +249,10 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
             }).orElseThrow(() -> {
                 return new IllegalStateException("Invalid datapack contents: can't find default preset");
             });
-            Optional optional = Optional.ofNullable(ResourceLocation.tryParse(this.levelType)).map((resourcelocation) -> {
+            Optional<ResourceKey<WorldPreset>> optional = Optional.ofNullable(ResourceLocation.tryParse(this.levelType)).map((resourcelocation) -> {
                 return ResourceKey.create(Registries.WORLD_PRESET, resourcelocation);
             }).or(() -> {
-                return Optional.ofNullable((ResourceKey) DedicatedServerProperties.WorldDimensionData.LEGACY_PRESET_NAMES.get(this.levelType));
+                return Optional.ofNullable(DedicatedServerProperties.WorldDimensionData.LEGACY_PRESET_NAMES.get(this.levelType));
             });
 
             Objects.requireNonNull(registry);
@@ -264,7 +264,7 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
 
             if (holder.is(WorldPresets.FLAT)) {
                 RegistryOps<JsonElement> registryops = RegistryOps.create(JsonOps.INSTANCE, (HolderLookup.Provider) registryaccess);
-                DataResult dataresult = FlatLevelGeneratorSettings.CODEC.parse(new Dynamic(registryops, this.generatorSettings()));
+                DataResult<FlatLevelGeneratorSettings> dataresult = FlatLevelGeneratorSettings.CODEC.parse(new Dynamic<>(registryops, this.generatorSettings()));
                 Logger logger = DedicatedServerProperties.LOGGER;
 
                 Objects.requireNonNull(logger);
