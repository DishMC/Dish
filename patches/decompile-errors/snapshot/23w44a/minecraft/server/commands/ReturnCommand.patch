diff --git a/minecraft/server/commands/ReturnCommand.java b/minecraft/server/commands/ReturnCommand.java
index c6eb495..ed63dd8 100644
--- a/minecraft/server/commands/ReturnCommand.java
+++ b/minecraft/server/commands/ReturnCommand.java
@@ -20,9 +20,9 @@ public class ReturnCommand {
     public ReturnCommand() {}
 
     public static <T extends ExecutionCommandSource<T>> void register(CommandDispatcher<T> commanddispatcher) {
-        commanddispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) LiteralArgumentBuilder.literal("return").requires((executioncommandsource) -> {
+        commanddispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) LiteralArgumentBuilder.<T>literal("return").requires((executioncommandsource) -> {
             return executioncommandsource.hasPermission(2);
-        })).then(RequiredArgumentBuilder.argument("value", IntegerArgumentType.integer()).executes(new ReturnCommand.ReturnValueCustomExecutor<>()))).then(LiteralArgumentBuilder.literal("fail").executes(new ReturnCommand.ReturnFailCustomExecutor<>()))).then(LiteralArgumentBuilder.literal("run").forward(commanddispatcher.getRoot(), new ReturnCommand.ReturnFromCommandCustomModifier<>(), false)));
+        })).then(RequiredArgumentBuilder.<T, Integer>argument("value", IntegerArgumentType.integer()).executes(new ReturnCommand.ReturnValueCustomExecutor<>()))).then(LiteralArgumentBuilder.<T>literal("fail").executes(new ReturnCommand.ReturnFailCustomExecutor<>()))).then(LiteralArgumentBuilder.<T>literal("run").forward(commanddispatcher.getRoot(), new ReturnCommand.ReturnFromCommandCustomModifier<>(), false)));
     }
 
     private static class ReturnValueCustomExecutor<T extends ExecutionCommandSource<T>> implements CustomCommandExecutor.CommandAdapter<T> {
