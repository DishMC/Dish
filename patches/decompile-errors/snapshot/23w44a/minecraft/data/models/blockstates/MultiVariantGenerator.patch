diff --git a/minecraft/data/models/blockstates/MultiVariantGenerator.java b/minecraft/data/models/blockstates/MultiVariantGenerator.java
index b9f07bd..d2d76ad 100644
--- a/minecraft/data/models/blockstates/MultiVariantGenerator.java
+++ b/minecraft/data/models/blockstates/MultiVariantGenerator.java
@@ -45,19 +45,15 @@ public class MultiVariantGenerator implements BlockStateGenerator {
     public JsonElement get() {
         Stream<Pair<Selector, List<Variant>>> stream = Stream.of(Pair.of(Selector.empty(), this.baseVariants));
 
-        Map map;
-
-        for (Iterator iterator = this.declaredPropertySets.iterator(); iterator.hasNext();stream = stream.flatMap((pair) -> {
-            return map.entrySet().stream().map((entry) -> {
-                Selector selector = ((Selector) pair.getFirst()).extend((Selector) entry.getKey());
-                List<Variant> list = mergeVariants((List) pair.getSecond(), (List) entry.getValue());
-
-                return Pair.of(selector, list);
+        for (PropertyDispatch propertydispatch : this.declaredPropertySets) {
+            stream = stream.flatMap((pair) -> {
+                return propertydispatch.getEntries().entrySet().stream().map((entry) -> {
+                    Selector selector = ((Selector) pair.getFirst()).extend((Selector) entry.getKey());
+                    List<Variant> list = mergeVariants((List) pair.getSecond(), (List) entry.getValue());
+
+                    return Pair.of(selector, list);
+                });
             });
-        })) {
-            PropertyDispatch propertydispatch = (PropertyDispatch) iterator.next();
-
-            map = propertydispatch.getEntries();
         }
 
         Map<String, JsonElement> map1 = new TreeMap();
@@ -79,7 +75,7 @@ public class MultiVariantGenerator implements BlockStateGenerator {
 
         list.forEach((variant) -> {
             list1.forEach((variant1) -> {
-                builder.add(Variant.merge(variant2, variant3));
+                builder.add(Variant.merge(variant, variant1));
             });
         });
         return builder.build();
@@ -95,7 +91,7 @@ public class MultiVariantGenerator implements BlockStateGenerator {
     }
 
     public static MultiVariantGenerator multiVariant(Block block, Variant variant) {
-        return new MultiVariantGenerator(block, ImmutableList.of(variant1));
+        return new MultiVariantGenerator(block, ImmutableList.of(variant));
     }
 
     public static MultiVariantGenerator multiVariant(Block block, Variant... avariant) {
