diff --git a/minecraft/server/commands/ExecuteCommand.java b/minecraft/server/commands/ExecuteCommand.java
index 9321c57..657dca6 100644
--- a/minecraft/server/commands/ExecuteCommand.java
+++ b/minecraft/server/commands/ExecuteCommand.java
@@ -564,7 +564,7 @@ public class ExecuteCommand {
             CommandSourceStack commandsourcestack = (CommandSourceStack) commandcontext.getSource();
             Entity entity = commandsourcestack.getEntity();
 
-            return (Collection) (entity == null ? List.of() : (Collection) ((Optional) function.apply(entity)).filter((entity1) -> {
+            return (entity == null ? List.of() : (function.apply(entity)).filter((entity1) -> {
                 return !entity1.isRemoved();
             }).map((entity1) -> {
                 return List.of(commandsourcestack.withEntity(entity1));
@@ -580,7 +580,7 @@ public class ExecuteCommand {
             if (entity == null) {
                 return List.of();
             } else {
-                Stream stream = ((Stream) function.apply(entity)).filter((entity1) -> {
+                Stream<Entity> stream = (function.apply(entity)).filter((entity1) -> {
                     return !entity1.isRemoved();
                 });
 
@@ -672,14 +672,14 @@ public class ExecuteCommand {
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
-            ExecutionCommandSource executioncommandsource = (ExecutionCommandSource) iterator.next();
+            ExecutionCommandSource<T> executioncommandsource = (ExecutionCommandSource) iterator.next();
 
             try {
-                Collection<CommandFunction<T>> collection = (Collection) executecommand_commandgetter.get(commandcontext.copyFor(executioncommandsource));
+                Collection<CommandFunction<T>> collection = (Collection) executecommand_commandgetter.get(commandcontext.copyFor((T) executioncommandsource));
                 int i = collection.size();
 
                 if (i != 0) {
-                    T t0 = prepareCallback(function, intpredicate, list1, executioncommandsource, i == 1);
+                    T t0 = prepareCallback(function, intpredicate, list1, (T) executioncommandsource, i == 1);
 
                     InstantiatedFunction instantiatedfunction;
 
@@ -705,7 +705,7 @@ public class ExecuteCommand {
     }
 
     private static <T extends ExecutionCommandSource<T>> T prepareCallback(Function<T, T> function, IntPredicate intpredicate, List<T> list, T t0, boolean flag) {
-        T t1 = ((ExecutionCommandSource) function.apply(t0)).clearCallbacks();
+        T t1 = (function.apply(t0)).clearCallbacks();
 
         if (flag) {
             return t1.withReturnValueConsumer((i) -> {
