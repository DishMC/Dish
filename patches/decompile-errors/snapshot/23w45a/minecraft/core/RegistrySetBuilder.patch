diff --git a/minecraft/core/RegistrySetBuilder.java b/minecraft/core/RegistrySetBuilder.java
index c1ddbd7..82cd694 100644
--- a/minecraft/core/RegistrySetBuilder.java
+++ b/minecraft/core/RegistrySetBuilder.java
@@ -114,7 +114,7 @@ public class RegistrySetBuilder {
     private HolderLookup.Provider createLazyFullPatchedRegistries(RegistryAccess registryaccess, HolderLookup.Provider holderlookup_provider, Cloner.Factory cloner_factory, Map<ResourceKey<? extends Registry<?>>, RegistrySetBuilder.RegistryContents<?>> map, HolderLookup.Provider holderlookup_provider1) {
         RegistrySetBuilder.CompositeOwner registrysetbuilder_compositeowner = new RegistrySetBuilder.CompositeOwner();
         MutableObject<HolderLookup.Provider> mutableobject = new MutableObject();
-        Stream stream = map.keySet().stream().map((resourcekey) -> {
+        Stream<HolderLookup.RegistryLookup<?>> stream = map.keySet().stream().map((resourcekey) -> {
             return this.createLazyFullPatchedRegistries(registrysetbuilder_compositeowner, cloner_factory, resourcekey, holderlookup_provider1, holderlookup_provider, mutableobject);
         });
 
@@ -210,7 +210,7 @@ public class RegistrySetBuilder {
                     RegistrySetBuilder.RegisteredValue<T> registrysetbuilder_registeredvalue = (RegistrySetBuilder.RegisteredValue) entry.getValue();
                     Holder.Reference<T> holder_reference = (Holder.Reference) registrysetbuilder_buildstate.lookup.holders.remove(resourcekey);
 
-                    map.put(resourcekey, new RegistrySetBuilder.ValueAndHolder<>(registrysetbuilder_registeredvalue, Optional.ofNullable(holder_reference)));
+                    map.put((ResourceKey<T>) resourcekey, new RegistrySetBuilder.ValueAndHolder<>(registrysetbuilder_registeredvalue, Optional.ofNullable(holder_reference)));
                     iterator.remove();
                 }
             }
@@ -311,7 +311,7 @@ public class RegistrySetBuilder {
         }
 
         public <T> HolderOwner<T> cast() {
-            return this;
+            return (HolderOwner<T>) this;
         }
     }
 
@@ -344,7 +344,7 @@ public class RegistrySetBuilder {
         Supplier<T> supplier;
 
         protected LazyHolder(HolderOwner<T> holderowner, @Nullable ResourceKey<T> resourcekey) {
-            super(Holder.Reference.Type.STAND_ALONE, holderowner, resourcekey, (Object) null);
+            super(Holder.Reference.Type.STAND_ALONE, holderowner, resourcekey, null);
         }
 
         @Override
@@ -385,7 +385,7 @@ public class RegistrySetBuilder {
         }
 
         <T> Holder.Reference<T> getOrCreate(ResourceKey<T> resourcekey) {
-            return (Holder.Reference) this.holders.computeIfAbsent(resourcekey, (resourcekey1) -> {
+            return (Holder.Reference) this.holders.computeIfAbsent((ResourceKey<Object>) resourcekey, (resourcekey1) -> {
                 return Holder.Reference.createStandAlone(this.owner, resourcekey1);
             });
         }
