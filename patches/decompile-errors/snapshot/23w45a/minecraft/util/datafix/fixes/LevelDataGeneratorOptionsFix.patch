diff --git a/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java b/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java
index a9c8cde..3e78b06 100644
--- a/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java
+++ b/minecraft/util/datafix/fixes/LevelDataGeneratorOptionsFix.java
@@ -133,7 +133,7 @@ public class LevelDataGeneratorOptionsFix extends DataFix {
         Iterator<String> iterator = Splitter.on(';').split(s).iterator();
         String s1 = "minecraft:plains";
         Map<String, Map<String, String>> map = Maps.newHashMap();
-        Object object;
+        List<Pair<Integer, String>> object;
 
         if (!s.isEmpty() && iterator.hasNext()) {
             object = getLayersInfoFromString((String) iterator.next());
@@ -181,11 +181,11 @@ public class LevelDataGeneratorOptionsFix extends DataFix {
             map.put("village", Maps.newHashMap());
         }
 
-        T t0 = dynamicops.createList(((List) object).stream().map((pair) -> {
+        T t0 = dynamicops.createList(object.stream().map((pair) -> {
             return dynamicops.createMap(ImmutableMap.of(dynamicops.createString("height"), dynamicops.createInt((Integer) pair.getFirst()), dynamicops.createString("block"), dynamicops.createString((String) pair.getSecond())));
         }));
-        T t1 = dynamicops.createMap((Map) map.entrySet().stream().map((entry) -> {
-            return Pair.of(dynamicops.createString(((String) entry.getKey()).toLowerCase(Locale.ROOT)), dynamicops.createMap((Map) ((Map) entry.getValue()).entrySet().stream().map((entry1) -> {
+        T t1 = dynamicops.createMap(map.entrySet().stream().map((entry) -> {
+            return Pair.of(dynamicops.createString(((String) entry.getKey()).toLowerCase(Locale.ROOT)), dynamicops.createMap(entry.getValue().entrySet().stream().map((entry1) -> {
                 return Pair.of(dynamicops.createString((String) entry1.getKey()), dynamicops.createString((String) entry1.getValue()));
             }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond))));
         }).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)));
