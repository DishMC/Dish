diff --git a/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java b/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
index 04b2cbb..125ae31 100644
--- a/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
+++ b/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix.java
@@ -83,7 +83,7 @@ public class ChunkHeightAndBiomeFix extends DataFix {
                 Dynamic<?>[] adynamic = getBiomeContainers(dynamic, flag, i, mutableboolean);
                 Dynamic<?> dynamic1 = makePalettedContainer(dynamic.createList(Stream.of(dynamic.createMap(ImmutableMap.of(dynamic.createString("Name"), dynamic.createString("minecraft:air"))))));
                 Set<String> set = Sets.newHashSet();
-                MutableObject<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> mutableobject = new MutableObject(() -> {
+                MutableObject<Supplier<ChunkProtoTickListFix.PoorMansPalettedContainer>> mutableobject = new MutableObject<>(() -> {
                     return null;
                 });
 
@@ -95,7 +95,7 @@ public class ChunkHeightAndBiomeFix extends DataFix {
                     List<Dynamic<?>> list = (List) dynamic2.asStream().map((dynamic3) -> {
                         int j = dynamic3.get("Y").asInt(0);
                         Dynamic<?> dynamic4 = (Dynamic) DataFixUtils.orElse(dynamic3.get("Palette").result().flatMap((dynamic5) -> {
-                            Stream stream = dynamic5.asStream().map((dynamic6) -> {
+                            Stream<String> stream = dynamic5.asStream().map((dynamic6) -> {
                                 return dynamic6.get("Name").asString("minecraft:air");
                             });
 
@@ -170,23 +170,25 @@ public class ChunkHeightAndBiomeFix extends DataFix {
 
     private static Dynamic<?>[] getBiomeContainers(Dynamic<?> dynamic, boolean flag, int i, MutableBoolean mutableboolean) {
         Dynamic<?>[] adynamic = new Dynamic[flag ? 24 : 16];
-        int[] aint = (int[]) dynamic.get("Biomes").asIntStreamOpt().result().map(IntStream::toArray).orElse((Object) null);
+        int[] aint = (int[]) dynamic.get("Biomes").asIntStreamOpt().result().map(IntStream::toArray).orElse(null);
         int j;
 
         if (aint != null && aint.length == 1536) {
             mutableboolean.setValue(true);
 
             for (j = 0; j < 24; ++j) {
+                int finalJ = j;
                 adynamic[j] = makeBiomeContainer(dynamic, (k) -> {
-                    return getOldBiome(aint, j * 64 + k);
+                    return getOldBiome(aint, finalJ * 64 + k);
                 });
             }
         } else if (aint != null && aint.length == 1024) {
             for (j = 0; j < 16; ++j) {
                 int k = j - i;
 
+                int finalJ1 = j;
                 adynamic[k] = makeBiomeContainer(dynamic, (l) -> {
-                    return getOldBiome(aint, j * 64 + l);
+                    return getOldBiome(aint, finalJ1 * 64 + l);
                 });
             }
 
