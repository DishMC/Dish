diff --git a/minecraft/data/models/BlockModelGenerators.java b/minecraft/data/models/BlockModelGenerators.java
index e490f67..279a739 100644
--- a/minecraft/data/models/BlockModelGenerators.java
+++ b/minecraft/data/models/BlockModelGenerators.java
@@ -83,7 +83,7 @@ public class BlockModelGenerators {
     final List<Block> nonOrientableTrapdoor;
     final Map<Block, BlockModelGenerators.BlockStateGeneratorSupplier> fullBlockModelCustomGenerators;
     final Map<Block, TexturedModel> texturedModels;
-    static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CUSTOM_FENCE, BlockModelGenerators.BlockFamilyProvider::customFence).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.CUSTOM_FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::customFenceGate).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
+    static final Map<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>> SHAPE_CONSUMERS = ImmutableMap.<BlockFamily.Variant, BiConsumer<BlockModelGenerators.BlockFamilyProvider, Block>>builder().put(BlockFamily.Variant.BUTTON, BlockModelGenerators.BlockFamilyProvider::button).put(BlockFamily.Variant.DOOR, BlockModelGenerators.BlockFamilyProvider::door).put(BlockFamily.Variant.CHISELED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CRACKED, BlockModelGenerators.BlockFamilyProvider::fullBlockVariant).put(BlockFamily.Variant.CUSTOM_FENCE, BlockModelGenerators.BlockFamilyProvider::customFence).put(BlockFamily.Variant.FENCE, BlockModelGenerators.BlockFamilyProvider::fence).put(BlockFamily.Variant.CUSTOM_FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::customFenceGate).put(BlockFamily.Variant.FENCE_GATE, BlockModelGenerators.BlockFamilyProvider::fenceGate).put(BlockFamily.Variant.SIGN, BlockModelGenerators.BlockFamilyProvider::sign).put(BlockFamily.Variant.SLAB, BlockModelGenerators.BlockFamilyProvider::slab).put(BlockFamily.Variant.STAIRS, BlockModelGenerators.BlockFamilyProvider::stairs).put(BlockFamily.Variant.PRESSURE_PLATE, BlockModelGenerators.BlockFamilyProvider::pressurePlate).put(BlockFamily.Variant.TRAPDOOR, BlockModelGenerators.BlockFamilyProvider::trapdoor).put(BlockFamily.Variant.WALL, BlockModelGenerators.BlockFamilyProvider::wall).build();
     public static final List<Pair<BooleanProperty, Function<ResourceLocation, Variant>>> MULTIFACE_GENERATOR = List.of(Pair.of(BlockStateProperties.NORTH, (resourcelocation) -> {
         return Variant.variant().with(VariantProperties.MODEL, resourcelocation);
     }), Pair.of(BlockStateProperties.EAST, (resourcelocation) -> {
@@ -119,8 +119,8 @@ public class BlockModelGenerators {
 
     public BlockModelGenerators(Consumer<BlockStateGenerator> consumer, BiConsumer<ResourceLocation, Supplier<JsonElement>> biconsumer, Consumer<Item> consumer1) {
         this.nonOrientableTrapdoor = ImmutableList.of(Blocks.OAK_TRAPDOOR, Blocks.DARK_OAK_TRAPDOOR, Blocks.IRON_TRAPDOOR);
-        this.fullBlockModelCustomGenerators = ImmutableMap.builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).put(Blocks.MUD_BRICKS, BlockModelGenerators::createNorthWestMirroredCubeGenerator).build();
-        this.texturedModels = ImmutableMap.builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((texturemapping) -> {
+        this.fullBlockModelCustomGenerators = ImmutableMap.<Block, BlockModelGenerators.BlockStateGeneratorSupplier>builder().put(Blocks.STONE, BlockModelGenerators::createMirroredCubeGenerator).put(Blocks.DEEPSLATE, BlockModelGenerators::createMirroredColumnGenerator).put(Blocks.MUD_BRICKS, BlockModelGenerators::createNorthWestMirroredCubeGenerator).build();
+        this.texturedModels = ImmutableMap.<Block, TexturedModel>builder().put(Blocks.SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.SANDSTONE)).put(Blocks.RED_SANDSTONE, TexturedModel.TOP_BOTTOM_WITH_WALL.get(Blocks.RED_SANDSTONE)).put(Blocks.SMOOTH_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.SANDSTONE, "_top"))).put(Blocks.SMOOTH_RED_SANDSTONE, TexturedModel.createAllSame(TextureMapping.getBlockTexture(Blocks.RED_SANDSTONE, "_top"))).put(Blocks.CUT_SANDSTONE, TexturedModel.COLUMN.get(Blocks.SANDSTONE).updateTextures((texturemapping) -> {
             texturemapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_SANDSTONE));
         })).put(Blocks.CUT_RED_SANDSTONE, TexturedModel.COLUMN.get(Blocks.RED_SANDSTONE).updateTextures((texturemapping) -> {
             texturemapping.put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.CUT_RED_SANDSTONE));
@@ -523,16 +523,16 @@ public class BlockModelGenerators {
 
             switch (doubleblockhalf) {
                 case UPPER:
-                    variant1 = Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(block, "_top_stage_" + integer));
+                    variant = Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(block, "_top_stage_" + integer));
                     break;
                 case LOWER:
-                    variant2 = Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(block, "_bottom_stage_" + integer));
+                    variant = Variant.variant().with(VariantProperties.MODEL, ModelLocationUtils.getModelLocation(block, "_bottom_stage_" + integer));
                     break;
                 default:
                     throw new IncompatibleClassChangeError();
             }
 
-            return variant3;
+            return variant;
         });
 
         this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(block).with(propertydispatch));
@@ -749,7 +749,7 @@ public class BlockModelGenerators {
         return PropertyDispatch.property(property).generate((comparable) -> {
             boolean flag = comparable.compareTo(t0) >= 0;
 
-            return flag ? variant2 : variant3;
+            return flag ? variant : variant1;
         });
     }
 
@@ -1124,17 +1124,17 @@ public class BlockModelGenerators {
         List<ResourceLocation> list2 = this.createTopFireModels(Blocks.FIRE);
 
         this.blockStateOutput.accept(MultiPartGenerator.multiPart(Blocks.FIRE).with(condition_terminalcondition, wrapModels(list, (variant) -> {
-            return variant1;
+            return variant;
         })).with(Condition.or(Condition.condition().term(BlockStateProperties.NORTH, true), condition_terminalcondition), wrapModels(list1, (variant) -> {
-            return variant1;
+            return variant;
         })).with(Condition.or(Condition.condition().term(BlockStateProperties.EAST, true), condition_terminalcondition), wrapModels(list1, (variant) -> {
-            return variant1.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90);
+            return variant.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90);
         })).with(Condition.or(Condition.condition().term(BlockStateProperties.SOUTH, true), condition_terminalcondition), wrapModels(list1, (variant) -> {
-            return variant1.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180);
+            return variant.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180);
         })).with(Condition.or(Condition.condition().term(BlockStateProperties.WEST, true), condition_terminalcondition), wrapModels(list1, (variant) -> {
-            return variant1.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270);
+            return variant.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270);
         })).with(Condition.condition().term(BlockStateProperties.UP, true), wrapModels(list2, (variant) -> {
-            return variant1;
+            return variant;
         })));
     }
 
@@ -1143,15 +1143,15 @@ public class BlockModelGenerators {
         List<ResourceLocation> list1 = this.createSideFireModels(Blocks.SOUL_FIRE);
 
         this.blockStateOutput.accept(MultiPartGenerator.multiPart(Blocks.SOUL_FIRE).with(wrapModels(list, (variant) -> {
-            return variant1;
+            return variant;
         })).with(wrapModels(list1, (variant) -> {
-            return variant1;
+            return variant;
         })).with(wrapModels(list1, (variant) -> {
-            return variant1.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90);
+            return variant.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90);
         })).with(wrapModels(list1, (variant) -> {
-            return variant1.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180);
+            return variant.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180);
         })).with(wrapModels(list1, (variant) -> {
-            return variant1.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270);
+            return variant.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270);
         })));
     }
 
@@ -1195,23 +1195,23 @@ public class BlockModelGenerators {
         TextureMapping texturemapping = (new TextureMapping()).put(TextureSlot.BOTTOM, resourcelocation).copyForced(TextureSlot.BOTTOM, TextureSlot.PARTICLE).put(TextureSlot.TOP, TextureMapping.getBlockTexture(Blocks.GRASS_BLOCK, "_top")).put(TextureSlot.SIDE, TextureMapping.getBlockTexture(Blocks.GRASS_BLOCK, "_snow"));
         Variant variant = Variant.variant().with(VariantProperties.MODEL, ModelTemplates.CUBE_BOTTOM_TOP.createWithSuffix(Blocks.GRASS_BLOCK, "_snow", texturemapping, this.modelOutput));
 
-        this.createGrassLikeBlock(Blocks.GRASS_BLOCK, ModelLocationUtils.getModelLocation(Blocks.GRASS_BLOCK), variant1);
+        this.createGrassLikeBlock(Blocks.GRASS_BLOCK, ModelLocationUtils.getModelLocation(Blocks.GRASS_BLOCK), variant);
         ResourceLocation resourcelocation1 = TexturedModel.CUBE_TOP_BOTTOM.get(Blocks.MYCELIUM).updateTextures((texturemapping1) -> {
             texturemapping1.put(TextureSlot.BOTTOM, resourcelocation);
         }).create(Blocks.MYCELIUM, this.modelOutput);
 
-        this.createGrassLikeBlock(Blocks.MYCELIUM, resourcelocation1, variant2);
+        this.createGrassLikeBlock(Blocks.MYCELIUM, resourcelocation1, variant);
         ResourceLocation resourcelocation2 = TexturedModel.CUBE_TOP_BOTTOM.get(Blocks.PODZOL).updateTextures((texturemapping1) -> {
             texturemapping1.put(TextureSlot.BOTTOM, resourcelocation);
         }).create(Blocks.PODZOL, this.modelOutput);
 
-        this.createGrassLikeBlock(Blocks.PODZOL, resourcelocation2, variant3);
+        this.createGrassLikeBlock(Blocks.PODZOL, resourcelocation2, variant);
     }
 
     private void createGrassLikeBlock(Block block, ResourceLocation resourcelocation, Variant variant) {
         List<Variant> list = Arrays.asList(createRotatedVariants(resourcelocation));
 
-        this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(block).with(PropertyDispatch.property(BlockStateProperties.SNOWY).select(true, variant1).select(false, list)));
+        this.blockStateOutput.accept(MultiVariantGenerator.multiVariant(block).with(PropertyDispatch.property(BlockStateProperties.SNOWY).select(true, variant).select(false, list)));
     }
 
     private void createCocoa() {
@@ -1344,21 +1344,21 @@ public class BlockModelGenerators {
             switch (trialspawnerstate) {
                 case INACTIVE:
                 case COOLDOWN:
-                    variant1 = Variant.variant().with(VariantProperties.MODEL, resourcelocation);
+                    variant = Variant.variant().with(VariantProperties.MODEL, resourcelocation);
                     break;
                 case WAITING_FOR_PLAYERS:
                 case ACTIVE:
                 case WAITING_FOR_REWARD_EJECTION:
-                    variant2 = Variant.variant().with(VariantProperties.MODEL, resourcelocation1);
+                    variant = Variant.variant().with(VariantProperties.MODEL, resourcelocation1);
                     break;
                 case EJECTING_REWARD:
-                    variant3 = Variant.variant().with(VariantProperties.MODEL, resourcelocation2);
+                    variant = Variant.variant().with(VariantProperties.MODEL, resourcelocation2);
                     break;
                 default:
                     throw new IncompatibleClassChangeError();
             }
 
-            return variant4;
+            return variant;
         })));
     }
 
@@ -1481,7 +1481,7 @@ public class BlockModelGenerators {
                 resourcelocation1 = resourcelocation;
             }
 
-            return variant1.with(variantproperty1, resourcelocation1);
+            return variant.with(variantproperty, resourcelocation1);
         })));
         this.delegateItemModel(Blocks.SNOW, ModelLocationUtils.getModelLocation(Blocks.SNOW, "_height2"));
         this.blockStateOutput.accept(createSimpleBlock(Blocks.SNOW_BLOCK, resourcelocation));
@@ -1520,7 +1520,7 @@ public class BlockModelGenerators {
             Block block = Blocks.TRIPWIRE_HOOK;
             String s = obool ? "_attached" : "";
 
-            return variant1.with(variantproperty1, TextureMapping.getBlockTexture(block, s + (obool1 ? "_on" : "")));
+            return variant.with(variantproperty, TextureMapping.getBlockTexture(block, s + (obool1 ? "_on" : "")));
         })).with(createHorizontalFacingDispatch()));
     }
 
@@ -1635,8 +1635,8 @@ public class BlockModelGenerators {
         Map.of(Direction.NORTH, VariantProperties.Rotation.R0, Direction.EAST, VariantProperties.Rotation.R90, Direction.SOUTH, VariantProperties.Rotation.R180, Direction.WEST, VariantProperties.Rotation.R270).forEach((direction, variantproperties_rotation) -> {
             Condition.TerminalCondition condition_terminalcondition = Condition.condition().term(BlockStateProperties.HORIZONTAL_FACING, direction);
 
-            multipartgenerator.with(condition_terminalcondition, Variant.variant().with(VariantProperties.MODEL, resourcelocation).with(VariantProperties.Y_ROT, variantproperties_rotation1).with(VariantProperties.UV_LOCK, true));
-            this.addSlotStateAndRotationVariants(multipartgenerator, condition_terminalcondition, variantproperties_rotation2);
+            multipartgenerator.with(condition_terminalcondition, Variant.variant().with(VariantProperties.MODEL, resourcelocation).with(VariantProperties.Y_ROT, variantproperties_rotation).with(VariantProperties.UV_LOCK, true));
+            this.addSlotStateAndRotationVariants(multipartgenerator, condition_terminalcondition, variantproperties_rotation);
         });
         this.blockStateOutput.accept(multipartgenerator);
         this.delegateItemModel(block, ModelLocationUtils.getModelLocation(block, "_inventory"));
@@ -1648,8 +1648,8 @@ public class BlockModelGenerators {
             BooleanProperty booleanproperty = (BooleanProperty) pair.getFirst();
             ModelTemplate modeltemplate = (ModelTemplate) pair.getSecond();
 
-            this.addBookSlotModel(multipartgenerator, condition_terminalcondition, variantproperties_rotation1, booleanproperty, modeltemplate, true);
-            this.addBookSlotModel(multipartgenerator, condition_terminalcondition, variantproperties_rotation2, booleanproperty, modeltemplate, false);
+            this.addBookSlotModel(multipartgenerator, condition_terminalcondition, variantproperties_rotation, booleanproperty, modeltemplate, true);
+            this.addBookSlotModel(multipartgenerator, condition_terminalcondition, variantproperties_rotation, booleanproperty, modeltemplate, false);
         });
     }
 
@@ -1661,7 +1661,7 @@ public class BlockModelGenerators {
             return modeltemplate.createWithSuffix(Blocks.CHISELED_BOOKSHELF, s, texturemapping, this.modelOutput);
         });
 
-        multipartgenerator.with(Condition.and(condition_terminalcondition, Condition.condition().term(booleanproperty, flag)), Variant.variant().with(VariantProperties.MODEL, resourcelocation).with(VariantProperties.Y_ROT, variantproperties_rotation1));
+        multipartgenerator.with(Condition.and(condition_terminalcondition, Condition.condition().term(booleanproperty, flag)), Variant.variant().with(VariantProperties.MODEL, resourcelocation).with(VariantProperties.Y_ROT, variantproperties_rotation));
     }
 
     private void createMagmaBlock() {
@@ -1727,29 +1727,29 @@ public class BlockModelGenerators {
     private Variant applyRotation(FrontAndTop frontandtop, Variant variant) {
         switch (frontandtop) {
             case DOWN_NORTH:
-                return variant1.with(VariantProperties.X_ROT, VariantProperties.Rotation.R90);
+                return variant.with(VariantProperties.X_ROT, VariantProperties.Rotation.R90);
             case DOWN_SOUTH:
-                return variant2.with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180);
+                return variant.with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180);
             case DOWN_WEST:
-                return variant3.with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270);
+                return variant.with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270);
             case DOWN_EAST:
-                return variant4.with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90);
+                return variant.with(VariantProperties.X_ROT, VariantProperties.Rotation.R90).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90);
             case UP_NORTH:
-                return variant5.with(VariantProperties.X_ROT, VariantProperties.Rotation.R270).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180);
+                return variant.with(VariantProperties.X_ROT, VariantProperties.Rotation.R270).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180);
             case UP_SOUTH:
-                return variant6.with(VariantProperties.X_ROT, VariantProperties.Rotation.R270);
+                return variant.with(VariantProperties.X_ROT, VariantProperties.Rotation.R270);
             case UP_WEST:
-                return variant7.with(VariantProperties.X_ROT, VariantProperties.Rotation.R270).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90);
+                return variant.with(VariantProperties.X_ROT, VariantProperties.Rotation.R270).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90);
             case UP_EAST:
-                return variant8.with(VariantProperties.X_ROT, VariantProperties.Rotation.R270).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270);
+                return variant.with(VariantProperties.X_ROT, VariantProperties.Rotation.R270).with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270);
             case NORTH_UP:
-                return variant9;
+                return variant;
             case SOUTH_UP:
-                return variant10.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180);
+                return variant.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R180);
             case WEST_UP:
-                return variant11.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270);
+                return variant.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R270);
             case EAST_UP:
-                return variant12.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90);
+                return variant.with(VariantProperties.Y_ROT, VariantProperties.Rotation.R90);
             default:
                 throw new UnsupportedOperationException("Rotation " + frontandtop + " can't be expressed with existing x and y values");
         }
