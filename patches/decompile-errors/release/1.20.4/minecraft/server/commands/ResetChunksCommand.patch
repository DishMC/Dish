diff --git a/minecraft/server/commands/ResetChunksCommand.java b/minecraft/server/commands/ResetChunksCommand.java
index fa9306f..77ffa78 100644
--- a/minecraft/server/commands/ResetChunksCommand.java
+++ b/minecraft/server/commands/ResetChunksCommand.java
@@ -113,7 +113,7 @@ public class ResetChunksCommand {
                         for (int j3 = chunkpos2.z - i3; j3 <= chunkpos2.z + i3; ++j3) {
                             for (int k3 = chunkpos2.x - i3; k3 <= chunkpos2.x + i3; ++k3) {
                                 ChunkAccess chunkaccess = serverchunkcache.getChunk(k3, j3, chunkstatus.getParent(), true);
-                                Object object;
+                                ChunkAccess object;
 
                                 if (chunkaccess instanceof ImposterProtoChunk) {
                                     object = new ImposterProtoChunk(((ImposterProtoChunk) chunkaccess).getWrapped(), true);
@@ -176,8 +176,9 @@ public class ResetChunksCommand {
 
         ResetChunksCommand.LOGGER.debug("blockChanged took " + (System.currentTimeMillis() - l3) + " ms");
         j2 = System.currentTimeMillis() - l1;
+        long finalJ = j2;
         commandsourcestack.sendSuccess(() -> {
-            return Component.literal(String.format(Locale.ROOT, "%d chunks have been reset. This took %d ms for %d chunks, or %02f ms per chunk", i2, j2, i2, (float) j2 / (float) i2));
+            return Component.literal(String.format(Locale.ROOT, "%d chunks have been reset. This took %d ms for %d chunks, or %02f ms per chunk", i2, finalJ, i2, (float) finalJ / (float) i2));
         }, true);
         return 1;
     }
