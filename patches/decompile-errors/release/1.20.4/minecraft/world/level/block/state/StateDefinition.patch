diff --git a/minecraft/world/level/block/state/StateDefinition.java b/minecraft/world/level/block/state/StateDefinition.java
index bce46ec..ef750db 100644
--- a/minecraft/world/level/block/state/StateDefinition.java
+++ b/minecraft/world/level/block/state/StateDefinition.java
@@ -37,7 +37,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
         this.owner = o0;
         this.propertiesByName = ImmutableSortedMap.copyOf(map);
         Supplier<S> supplier = () -> {
-            return (StateHolder) function.apply(o0);
+            return function.apply(o0);
         };
         MapCodec<S> mapcodec = MapCodec.of(Encoder.empty(), Decoder.unit(supplier));
 
@@ -51,22 +51,21 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
         List<S> list = Lists.newArrayList();
         Stream<List<Pair<Property<?>, Comparable<?>>>> stream = Stream.of(Collections.emptyList());
 
-        Property property;
+        for (Property<?> property : this.propertiesByName.values()) {
+            stream = stream.flatMap((list1) -> {
+                return property.getPossibleValues().stream().map((comparable) -> {
+                    List<Pair<Property<?>, Comparable<?>>> list2 = Lists.newArrayList(list1);
 
-        for (UnmodifiableIterator unmodifiableiterator1 = this.propertiesByName.values().iterator(); unmodifiableiterator1.hasNext();stream = stream.flatMap((list1) -> {
-            return property.getPossibleValues().stream().map((comparable) -> {
-                List<Pair<Property<?>, Comparable<?>>> list2 = Lists.newArrayList(list1);
-
-                list2.add(Pair.of(property, comparable));
-                return list2;
+                    list2.add(Pair.of(property, comparable));
+                    return list2;
+                });
             });
-        })) {
-            property = (Property) unmodifiableiterator1.next();
         }
 
+        MapCodec<S> finalMapcodec = mapcodec;
         stream.forEach((list1) -> {
             ImmutableMap<Property<?>, Comparable<?>> immutablemap = (ImmutableMap) list1.stream().collect(ImmutableMap.toImmutableMap(Pair::getFirst, Pair::getSecond));
-            S s0 = (StateHolder) statedefinition_factory.create(o0, immutablemap, mapcodec);
+            S s0 = statedefinition_factory.create(o0, immutablemap, finalMapcodec);
 
             map1.put(immutablemap, s0);
             list.add(s0);
@@ -74,7 +73,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
-            S s0 = (StateHolder) iterator.next();
+            S s0 = (S) iterator.next();
 
             s0.populateNeighbours(map1);
         }
@@ -85,9 +84,9 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
     private static <S extends StateHolder<?, S>, T extends Comparable<T>> MapCodec<S> appendPropertyCodec(MapCodec<S> mapcodec, Supplier<S> supplier, String s, Property<T> property) {
         return Codec.mapPair(mapcodec, property.valueCodec().fieldOf(s).orElseGet((s1) -> {
         }, () -> {
-            return property.value((StateHolder) supplier.get());
+            return property.value(supplier.get());
         })).xmap((pair) -> {
-            return (StateHolder) ((StateHolder) pair.getFirst()).setValue(property, ((Property.Value) pair.getSecond()).value());
+            return pair.getFirst().setValue(property, pair.getSecond().value());
         }, (stateholder) -> {
             return Pair.of(stateholder, property.value(stateholder));
         });
@@ -98,7 +97,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
     }
 
     public S any() {
-        return (StateHolder) this.states.get(0);
+        return this.states.get(0);
     }
 
     public O getOwner() {
@@ -170,7 +169,7 @@ public class StateDefinition<O, S extends StateHolder<O, S>> {
                             return;
                         }
 
-                        T t0 = (Comparable) iterator.next();
+                        T t0 = (T) iterator.next();
 
                         s1 = property.getName(t0);
                     } while (StateDefinition.NAME_PATTERN.matcher(s1).matches());
