diff --git a/minecraft/data/models/blockstates/PropertyDispatch.java b/minecraft/data/models/blockstates/PropertyDispatch.java
index a769295..3d8932e 100644
--- a/minecraft/data/models/blockstates/PropertyDispatch.java
+++ b/minecraft/data/models/blockstates/PropertyDispatch.java
@@ -37,15 +37,10 @@ public abstract class PropertyDispatch {
         List<Property<?>> list = this.getDefinedProperties();
         Stream<Selector> stream = Stream.of(Selector.empty());
 
-        Property property;
-
-        for (Iterator iterator = list.iterator(); iterator.hasNext();stream = stream.flatMap((selector) -> {
-            Stream stream1 = property.getAllValues();
-
-            Objects.requireNonNull(selector);
-            return stream1.map(selector::extend);
-        })) {
-            property = (Property) iterator.next();
+        for (Property<?> property : list) {
+            stream = stream.flatMap((selector) -> {
+                return property.getAllValues().map(selector::extend);
+            });
         }
 
         List<Selector> list1 = (List) stream.filter((selector) -> {
@@ -100,7 +95,7 @@ public abstract class PropertyDispatch {
         }
 
         public PropertyDispatch.C1<T1> select(T1 t1, Variant variant) {
-            return this.select(t1, Collections.singletonList(variant1));
+            return this.select(t1, Collections.singletonList(variant));
         }
 
         public PropertyDispatch generate(Function<T1, Variant> function) {
@@ -141,7 +136,7 @@ public abstract class PropertyDispatch {
         }
 
         public PropertyDispatch.C2<T1, T2> select(T1 t1, T2 t2, Variant variant) {
-            return this.select(t1, t2, Collections.singletonList(variant1));
+            return this.select(t1, t2, Collections.singletonList(variant));
         }
 
         public PropertyDispatch generate(BiFunction<T1, T2, Variant> bifunction) {
@@ -188,7 +183,7 @@ public abstract class PropertyDispatch {
         }
 
         public PropertyDispatch.C3<T1, T2, T3> select(T1 t1, T2 t2, T3 t3, Variant variant) {
-            return this.select(t1, t2, t3, Collections.singletonList(variant1));
+            return this.select(t1, t2, t3, Collections.singletonList(variant));
         }
 
         public PropertyDispatch generate(PropertyDispatch.TriFunction<T1, T2, T3, Variant> propertydispatch_trifunction) {
@@ -241,7 +236,7 @@ public abstract class PropertyDispatch {
         }
 
         public PropertyDispatch.C4<T1, T2, T3, T4> select(T1 t1, T2 t2, T3 t3, T4 t4, Variant variant) {
-            return this.select(t1, t2, t3, t4, Collections.singletonList(variant1));
+            return this.select(t1, t2, t3, t4, Collections.singletonList(variant));
         }
 
         public PropertyDispatch generate(PropertyDispatch.QuadFunction<T1, T2, T3, T4, Variant> propertydispatch_quadfunction) {
@@ -300,7 +295,7 @@ public abstract class PropertyDispatch {
         }
 
         public PropertyDispatch.C5<T1, T2, T3, T4, T5> select(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, Variant variant) {
-            return this.select(t1, t2, t3, t4, t5, Collections.singletonList(variant1));
+            return this.select(t1, t2, t3, t4, t5, Collections.singletonList(variant));
         }
 
         public PropertyDispatch generate(PropertyDispatch.PentaFunction<T1, T2, T3, T4, T5, Variant> propertydispatch_pentafunction) {
