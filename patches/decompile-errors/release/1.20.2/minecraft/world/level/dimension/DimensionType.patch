diff --git a/minecraft/world/level/dimension/DimensionType.java b/minecraft/world/level/dimension/DimensionType.java
index e03fd38..cd0ed1a 100644
--- a/minecraft/world/level/dimension/DimensionType.java
+++ b/minecraft/world/level/dimension/DimensionType.java
@@ -37,33 +37,33 @@ public record DimensionType(OptionalLong fixedTime, boolean hasSkyLight, boolean
     public static final float[] MOON_BRIGHTNESS_PER_PHASE = new float[]{1.0F, 0.75F, 0.5F, 0.25F, 0.0F, 0.25F, 0.5F, 0.75F};
     public static final Codec<Holder<DimensionType>> CODEC = RegistryFileCodec.create(Registries.DIMENSION_TYPE, DimensionType.DIRECT_CODEC);
 
-    public DimensionType(OptionalLong optionallong, boolean flag, boolean flag1, boolean flag2, boolean flag3, double d0, boolean flag4, boolean flag5, int i, int j, int k, TagKey<Block> tagkey, ResourceLocation resourcelocation, float f, DimensionType.MonsterSettings dimensiontype_monstersettings) {
-        if (j < 16) {
+    public DimensionType(OptionalLong fixedTime, boolean hasSkyLight, boolean hasCeiling, boolean ultraWarm, boolean natural, double coordinateScale, boolean bedWorks, boolean respawnAnchorWorks, int minY, int height, int logicalHeight, TagKey<Block> infiniburn, ResourceLocation effectsLocation, float ambientLight, DimensionType.MonsterSettings monsterSettings) {
+        if (height < 16) {
             throw new IllegalStateException("height has to be at least 16");
-        } else if (i + j > DimensionType.MAX_Y + 1) {
+        } else if (minY + height > DimensionType.MAX_Y + 1) {
             throw new IllegalStateException("min_y + height cannot be higher than: " + (DimensionType.MAX_Y + 1));
-        } else if (k > j) {
+        } else if (logicalHeight > height) {
             throw new IllegalStateException("logical_height cannot be higher than height");
-        } else if (j % 16 != 0) {
+        } else if (height % 16 != 0) {
             throw new IllegalStateException("height has to be multiple of 16");
-        } else if (i % 16 != 0) {
+        } else if (minY % 16 != 0) {
             throw new IllegalStateException("min_y has to be a multiple of 16");
         } else {
-            this.fixedTime = optionallong;
-            this.hasSkyLight = flag;
-            this.hasCeiling = flag1;
-            this.ultraWarm = flag2;
-            this.natural = flag3;
-            this.coordinateScale = d0;
-            this.bedWorks = flag4;
-            this.respawnAnchorWorks = flag5;
-            this.minY = i;
-            this.height = j;
-            this.logicalHeight = k;
-            this.infiniburn = tagkey;
-            this.effectsLocation = resourcelocation;
-            this.ambientLight = f;
-            this.monsterSettings = dimensiontype_monstersettings;
+            this.fixedTime = fixedTime;
+            this.hasSkyLight = hasSkyLight;
+            this.hasCeiling = hasCeiling;
+            this.ultraWarm = ultraWarm;
+            this.natural = natural;
+            this.coordinateScale = coordinateScale;
+            this.bedWorks = bedWorks;
+            this.respawnAnchorWorks = respawnAnchorWorks;
+            this.minY = minY;
+            this.height = height;
+            this.logicalHeight = logicalHeight;
+            this.infiniburn = infiniburn;
+            this.effectsLocation = effectsLocation;
+            this.ambientLight = ambientLight;
+            this.monsterSettings = monsterSettings;
         }
     }
 
