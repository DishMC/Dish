diff --git a/minecraft/world/level/chunk/PalettedContainer.java b/minecraft/world/level/chunk/PalettedContainer.java
index 33af680..339068e 100644
--- a/minecraft/world/level/chunk/PalettedContainer.java
+++ b/minecraft/world/level/chunk/PalettedContainer.java
@@ -60,7 +60,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
     }
 
     private static <T, C extends PalettedContainerRO<T>> Codec<C> codec(IdMap<T> idmap, Codec<T> codec, PalettedContainer.Strategy palettedcontainer_strategy, T t0, PalettedContainerRO.Unpacker<T, C> palettedcontainerro_unpacker) {
-        return RecordCodecBuilder.create((instance) -> {
+        return RecordCodecBuilder.<PackedData<T>>create((instance) -> {
             return instance.group(codec.mapResult(ExtraCodecs.orElsePartial(t0)).listOf().fieldOf("palette").forGetter(PalettedContainerRO.PackedData::paletteEntries), Codec.LONG_STREAM.optionalFieldOf("data").forGetter(PalettedContainerRO.PackedData::storage)).apply(instance, PalettedContainerRO.PackedData::new);
         }).comapFlatMap((palettedcontainerro_packeddata) -> {
             return palettedcontainerro_unpacker.read(idmap, palettedcontainer_strategy, palettedcontainerro_packeddata);
@@ -107,7 +107,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
     public T getAndSet(int i, int j, int k, T t0) {
         this.acquire();
 
-        Object object;
+        T object;
 
         try {
             object = this.getAndSet(this.strategy.getIndex(i, j, k), t0);
@@ -343,19 +343,19 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
 
                 switch (i) {
                     case 0:
-                        palettedcontainer_configuration = new PalettedContainer.Configuration<>(null.SINGLE_VALUE_PALETTE_FACTORY, i);
+                        palettedcontainer_configuration = new PalettedContainer.Configuration<>(SINGLE_VALUE_PALETTE_FACTORY, i);
                         break;
                     case 1:
                     case 2:
                     case 3:
                     case 4:
-                        palettedcontainer_configuration = new PalettedContainer.Configuration<>(null.LINEAR_PALETTE_FACTORY, 4);
+                        palettedcontainer_configuration = new PalettedContainer.Configuration<>(LINEAR_PALETTE_FACTORY, 4);
                         break;
                     case 5:
                     case 6:
                     case 7:
                     case 8:
-                        palettedcontainer_configuration = new PalettedContainer.Configuration<>(null.HASHMAP_PALETTE_FACTORY, i);
+                        palettedcontainer_configuration = new PalettedContainer.Configuration<>(HASHMAP_PALETTE_FACTORY, i);
                         break;
                     default:
                         palettedcontainer_configuration = new PalettedContainer.Configuration<>(PalettedContainer.Strategy.GLOBAL_PALETTE_FACTORY, Mth.ceillog2(idmap.size()));
@@ -371,12 +371,12 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
 
                 switch (i) {
                     case 0:
-                        palettedcontainer_configuration = new PalettedContainer.Configuration<>(null.SINGLE_VALUE_PALETTE_FACTORY, i);
+                        palettedcontainer_configuration = new PalettedContainer.Configuration<>(SINGLE_VALUE_PALETTE_FACTORY, i);
                         break;
                     case 1:
                     case 2:
                     case 3:
-                        palettedcontainer_configuration = new PalettedContainer.Configuration<>(null.LINEAR_PALETTE_FACTORY, i);
+                        palettedcontainer_configuration = new PalettedContainer.Configuration<>(LINEAR_PALETTE_FACTORY, i);
                         break;
                     default:
                         palettedcontainer_configuration = new PalettedContainer.Configuration<>(PalettedContainer.Strategy.GLOBAL_PALETTE_FACTORY, Mth.ceillog2(idmap.size()));
