diff --git a/minecraft/world/level/GameRules.java b/minecraft/world/level/GameRules.java
index ec76d8b..6b278c6 100644
--- a/minecraft/world/level/GameRules.java
+++ b/minecraft/world/level/GameRules.java
@@ -138,7 +138,7 @@ public class GameRules {
     }
 
     public <T extends GameRules.Value<T>> T getRule(GameRules.Key<T> gamerules_key) {
-        return (GameRules.Value) this.rules.get(gamerules_key);
+        return (T) this.rules.get(gamerules_key);
     }
 
     public CompoundTag createTag() {
@@ -152,7 +152,7 @@ public class GameRules {
 
     private void loadFromTag(DynamicLike<?> dynamiclike) {
         this.rules.forEach((gamerules_key, gamerules_value) -> {
-            Optional optional = dynamiclike.get(gamerules_key.id).asString().result();
+            Optional<String> optional = dynamiclike.get(gamerules_key.id).asString().result();
 
             Objects.requireNonNull(gamerules_value);
             optional.ifPresent(gamerules_value::deserialize);
@@ -265,11 +265,11 @@ public class GameRules {
         }
 
         public T createRule() {
-            return (GameRules.Value) this.constructor.apply(this);
+            return this.constructor.apply(this);
         }
 
-        public void callVisitor(GameRules.GameRuleTypeVisitor gamerules_gameruletypevisitor, GameRules.Key<T> gamerules_key) {
-            this.visitorCaller.call(gamerules_gameruletypevisitor, gamerules_key, this);
+        public void callVisitor(GameRules.GameRuleTypeVisitor gamerules_gameruletypevisitor, GameRules.Key<?> gamerules_key) {
+            this.visitorCaller.call(gamerules_gameruletypevisitor, (Key<T>) gamerules_key, this);
         }
     }
 
@@ -314,7 +314,7 @@ public class GameRules {
 
     public interface GameRuleTypeVisitor {
 
-        default <T extends GameRules.Value<T>> void visit(GameRules.Key<T> gamerules_key, GameRules.Type<T> gamerules_type) {}
+        default <T extends GameRules.Value<T>> void visit(GameRules.Key<?> gamerules_key, GameRules.Type<?> gamerules_type) {}
 
         default void visitBoolean(GameRules.Key<GameRules.BooleanValue> gamerules_key, GameRules.Type<GameRules.BooleanValue> gamerules_type) {}
 
