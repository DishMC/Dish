diff --git a/minecraft/world/entity/Display.java b/minecraft/world/entity/Display.java
index 4f88d0d..726ccef 100644
--- a/minecraft/world/entity/Display.java
+++ b/minecraft/world/entity/Display.java
@@ -17,6 +17,7 @@ import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.NbtUtils;
+import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.MutableComponent;
@@ -198,14 +199,8 @@ public abstract class Display extends Entity {
 
     @Override
     protected void readAdditionalSaveData(CompoundTag compoundtag) {
-        DataResult dataresult;
-        Logger logger;
-
         if (compoundtag.contains("transformation")) {
-            dataresult = Transformation.EXTENDED_CODEC.decode(NbtOps.INSTANCE, compoundtag.get("transformation"));
-            logger = Display.LOGGER;
-            Objects.requireNonNull(logger);
-            dataresult.resultOrPartial(Util.prefix("Display entity", logger::error)).ifPresent((pair) -> {
+            Transformation.EXTENDED_CODEC.decode(NbtOps.INSTANCE, compoundtag.get("transformation")).resultOrPartial(Util.prefix("Display entity", Display.LOGGER::error)).ifPresent((pair) -> {
                 this.setTransformation((Transformation) pair.getFirst());
             });
         }
@@ -228,10 +223,7 @@ public abstract class Display extends Entity {
         }
 
         if (compoundtag.contains("billboard", 8)) {
-            dataresult = Display.BillboardConstraints.CODEC.decode(NbtOps.INSTANCE, compoundtag.get("billboard"));
-            logger = Display.LOGGER;
-            Objects.requireNonNull(logger);
-            dataresult.resultOrPartial(Util.prefix("Display entity", logger::error)).ifPresent((pair) -> {
+            Display.BillboardConstraints.CODEC.decode(NbtOps.INSTANCE, compoundtag.get("billboard")).resultOrPartial(Util.prefix("Display entity", Display.LOGGER::error)).ifPresent((pair) -> {
                 this.setBillboardConstraints((Display.BillboardConstraints) pair.getFirst());
             });
         }
@@ -261,10 +253,7 @@ public abstract class Display extends Entity {
         }
 
         if (compoundtag.contains("brightness", 10)) {
-            dataresult = Brightness.CODEC.decode(NbtOps.INSTANCE, compoundtag.get("brightness"));
-            logger = Display.LOGGER;
-            Objects.requireNonNull(logger);
-            dataresult.resultOrPartial(Util.prefix("Display entity", logger::error)).ifPresent((pair) -> {
+            Brightness.CODEC.decode(NbtOps.INSTANCE, compoundtag.get("brightness")).resultOrPartial(Util.prefix("Display entity", Display.LOGGER::error)).ifPresent((pair) -> {
                 this.setBrightnessOverride((Brightness) pair.getFirst());
             });
         } else {
@@ -678,7 +667,7 @@ public abstract class Display extends Entity {
             this.entityData.define(Display.TextDisplay.DATA_TEXT_ID, Component.empty());
             this.entityData.define(Display.TextDisplay.DATA_LINE_WIDTH_ID, 200);
             this.entityData.define(Display.TextDisplay.DATA_BACKGROUND_COLOR_ID, 1073741824);
-            this.entityData.define(Display.TextDisplay.DATA_TEXT_OPACITY_ID, -1);
+            this.entityData.define(Display.TextDisplay.DATA_TEXT_OPACITY_ID, (byte) -1);
             this.entityData.define(Display.TextDisplay.DATA_STYLE_FLAGS_ID, (byte) 0);
         }
 
@@ -754,7 +743,7 @@ public abstract class Display extends Entity {
 
             b0 = loadFlag(b0, compoundtag, "see_through", (byte) 2);
             b0 = loadFlag(b0, compoundtag, "default_background", (byte) 4);
-            DataResult dataresult = Display.TextDisplay.Align.CODEC.decode(NbtOps.INSTANCE, compoundtag.get("alignment"));
+            DataResult<Pair<Align, Tag>> dataresult = Display.TextDisplay.Align.CODEC.decode(NbtOps.INSTANCE, compoundtag.get("alignment"));
             Logger logger = Display.LOGGER;
 
             Objects.requireNonNull(logger);
@@ -1025,7 +1014,7 @@ public abstract class Display extends Entity {
             super.readAdditionalSaveData(compoundtag);
             this.setItemStack(ItemStack.of(compoundtag.getCompound("item")));
             if (compoundtag.contains("item_display", 8)) {
-                DataResult dataresult = ItemDisplayContext.CODEC.decode(NbtOps.INSTANCE, compoundtag.get("item_display"));
+                DataResult<Pair<ItemDisplayContext, Tag>> dataresult = ItemDisplayContext.CODEC.decode(NbtOps.INSTANCE, compoundtag.get("item_display"));
                 Logger logger = Display.LOGGER;
 
                 Objects.requireNonNull(logger);
