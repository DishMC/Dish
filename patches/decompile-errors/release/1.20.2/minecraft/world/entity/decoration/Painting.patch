diff --git a/minecraft/world/entity/decoration/Painting.java b/minecraft/world/entity/decoration/Painting.java
index 6aed058..c467a6a 100644
--- a/minecraft/world/entity/decoration/Painting.java
+++ b/minecraft/world/entity/decoration/Painting.java
@@ -73,7 +73,7 @@ public class Painting extends HangingEntity implements VariantHolder<Holder<Pain
     public static Optional<Painting> create(Level level, BlockPos blockpos, Direction direction) {
         Painting painting = new Painting(level, blockpos);
         List<Holder<PaintingVariant>> list = new ArrayList();
-        Iterable iterable = BuiltInRegistries.PAINTING_VARIANT.getTagOrEmpty(PaintingVariantTags.PLACEABLE);
+        Iterable<Holder<PaintingVariant>> iterable = BuiltInRegistries.PAINTING_VARIANT.getTagOrEmpty(PaintingVariantTags.PLACEABLE);
 
         Objects.requireNonNull(list);
         iterable.forEach(list::add);
@@ -142,10 +142,10 @@ public class Painting extends HangingEntity implements VariantHolder<Holder<Pain
     }
 
     public static Optional<Holder<PaintingVariant>> loadVariant(CompoundTag compoundtag) {
-        Optional optional = Optional.ofNullable(ResourceLocation.tryParse(compoundtag.getString("variant"))).map((resourcelocation) -> {
+        Optional<ResourceKey<PaintingVariant>> optional = Optional.ofNullable(ResourceLocation.tryParse(compoundtag.getString("variant"))).map((resourcelocation) -> {
             return ResourceKey.create(Registries.PAINTING_VARIANT, resourcelocation);
         });
-        DefaultedRegistry defaultedregistry = BuiltInRegistries.PAINTING_VARIANT;
+        DefaultedRegistry<PaintingVariant> defaultedregistry = BuiltInRegistries.PAINTING_VARIANT;
 
         Objects.requireNonNull(defaultedregistry);
         return optional.flatMap(defaultedregistry::getHolder);
