diff --git a/minecraft/world/entity/ai/sensing/PlayerSensor.java b/minecraft/world/entity/ai/sensing/PlayerSensor.java
index 83464f1..f2db161 100644
--- a/minecraft/world/entity/ai/sensing/PlayerSensor.java
+++ b/minecraft/world/entity/ai/sensing/PlayerSensor.java
@@ -9,6 +9,7 @@ import java.util.Set;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.Brain;
@@ -26,7 +27,7 @@ public class PlayerSensor extends Sensor<LivingEntity> {
 
     @Override
     protected void doTick(ServerLevel serverlevel, LivingEntity livingentity) {
-        Stream stream = serverlevel.players().stream().filter(EntitySelector.NO_SPECTATORS).filter((serverplayer) -> {
+        Stream<ServerPlayer> stream = serverlevel.players().stream().filter(EntitySelector.NO_SPECTATORS).filter((serverplayer) -> {
             return livingentity.closerThan(serverplayer, 16.0D);
         });
 
@@ -34,12 +35,12 @@ public class PlayerSensor extends Sensor<LivingEntity> {
         List<Player> list = (List) stream.sorted(Comparator.comparingDouble(livingentity::distanceToSqr)).collect(Collectors.toList());
         Brain<?> brain = livingentity.getBrain();
 
-        brain.setMemory(MemoryModuleType.NEAREST_PLAYERS, (Object) list);
+        brain.setMemory(MemoryModuleType.NEAREST_PLAYERS, list);
         List<Player> list1 = (List) list.stream().filter((player) -> {
             return isEntityTargetable(livingentity, player);
         }).collect(Collectors.toList());
 
-        brain.setMemory(MemoryModuleType.NEAREST_VISIBLE_PLAYER, (Object) (list1.isEmpty() ? null : (Player) list1.get(0)));
+        brain.setMemory(MemoryModuleType.NEAREST_VISIBLE_PLAYER, (list1.isEmpty() ? null : (Player) list1.get(0)));
         Optional<Player> optional = list1.stream().filter((player) -> {
             return isEntityAttackable(livingentity, player);
         }).findFirst();
