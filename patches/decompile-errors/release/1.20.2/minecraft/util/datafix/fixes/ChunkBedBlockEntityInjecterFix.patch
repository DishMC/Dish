diff --git a/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java b/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
index a80a9d5..8a705c7 100644
--- a/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
+++ b/minecraft/util/datafix/fixes/ChunkBedBlockEntityInjecterFix.java
@@ -44,7 +44,7 @@ public class ChunkBedBlockEntityInjecterFix extends DataFix {
         OpticFinder<List<TE>> opticfinder1 = DSL.fieldFinder("TileEntities", listtype);
         boolean flag = true;
 
-        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicops) -> {
+        return TypeRewriteRule.seq(this.fixTypeEverywhere("InjectBedBlockEntityType", (com.mojang.datafixers.types.templates.TaggedChoice.TaggedChoiceType<String>)this.getInputSchema().findChoiceType(References.BLOCK_ENTITY), (com.mojang.datafixers.types.templates.TaggedChoice.TaggedChoiceType<String>)this.getOutputSchema().findChoiceType(References.BLOCK_ENTITY), (dynamicops) -> {
             return (pair) -> {
                 return pair;
             };
@@ -80,7 +80,7 @@ public class ChunkBedBlockEntityInjecterFix extends DataFix {
                     }
                 }).forEachOrdered((map) -> {
                     if (map != null) {
-                        list.add(((Pair) type1.read(dynamic1.createMap(map)).result().orElseThrow(() -> {
+                        list.add((type1.read(dynamic1.createMap(map)).result().orElseThrow(() -> {
                             return new IllegalStateException("Could not parse newly created bed block entity.");
                         })).getFirst());
                     }
