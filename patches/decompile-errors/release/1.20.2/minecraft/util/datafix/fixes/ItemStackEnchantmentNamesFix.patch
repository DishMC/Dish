diff --git a/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java b/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
index b66e637..3bea0b7 100644
--- a/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
+++ b/minecraft/util/datafix/fixes/ItemStackEnchantmentNamesFix.java
@@ -13,6 +13,7 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import java.util.Objects;
 import java.util.Optional;
+import java.util.stream.Stream;
 
 public class ItemStackEnchantmentNamesFix extends DataFix {
 
@@ -69,21 +70,21 @@ public class ItemStackEnchantmentNamesFix extends DataFix {
     }
 
     private Dynamic<?> fixTag(Dynamic<?> dynamic) {
-        DataResult dataresult = dynamic.get("ench").asStreamOpt().map((stream) -> {
+        DataResult<Stream> dataresult = dynamic.get("ench").asStreamOpt().map((stream) -> {
             return stream.map((dynamic1) -> {
                 return dynamic1.set("id", dynamic1.createString((String) ItemStackEnchantmentNamesFix.MAP.getOrDefault(dynamic1.get("id").asInt(0), "null")));
             });
         });
 
         Objects.requireNonNull(dynamic);
-        Optional<? extends Dynamic<?>> optional = dataresult.map(dynamic::createList).result();
+        Optional optional = dataresult.map(dynamic::createList).result();
 
         if (optional.isPresent()) {
             dynamic = dynamic.remove("ench").set("Enchantments", (Dynamic) optional.get());
         }
 
         return dynamic.update("StoredEnchantments", (dynamic1) -> {
-            DataResult dataresult1 = dynamic1.asStreamOpt().map((stream) -> {
+            DataResult<Stream> dataresult1 = dynamic1.asStreamOpt().map((stream) -> {
                 return stream.map((dynamic2) -> {
                     return dynamic2.set("id", dynamic2.createString((String) ItemStackEnchantmentNamesFix.MAP.getOrDefault(dynamic2.get("id").asInt(0), "null")));
                 });
