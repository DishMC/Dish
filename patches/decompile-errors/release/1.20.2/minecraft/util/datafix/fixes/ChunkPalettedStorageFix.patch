diff --git a/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java b/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
index 1b564eb..d0bc9b0 100644
--- a/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
+++ b/minecraft/util/datafix/fixes/ChunkPalettedStorageFix.java
@@ -54,7 +54,7 @@ public class ChunkPalettedStorageFix extends DataFix {
     static final Dynamic<?> UPPER_LARGE_FERN = BlockStateData.parse("{Name:'minecraft:large_fern',Properties:{half:'upper'}}");
     static final Dynamic<?> UPPER_ROSE_BUSH = BlockStateData.parse("{Name:'minecraft:rose_bush',Properties:{half:'upper'}}");
     static final Dynamic<?> UPPER_PEONY = BlockStateData.parse("{Name:'minecraft:peony',Properties:{half:'upper'}}");
-    static final Map<String, Dynamic<?>> FLOWER_POT_MAP = (Map) DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
+    static final Map<String, Dynamic<?>> FLOWER_POT_MAP = DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
         hashmap.put("minecraft:air0", BlockStateData.parse("{Name:'minecraft:flower_pot'}"));
         hashmap.put("minecraft:red_flower0", BlockStateData.parse("{Name:'minecraft:potted_poppy'}"));
         hashmap.put("minecraft:red_flower1", BlockStateData.parse("{Name:'minecraft:potted_blue_orchid'}"));
@@ -78,7 +78,7 @@ public class ChunkPalettedStorageFix extends DataFix {
         hashmap.put("minecraft:tallgrass2", BlockStateData.parse("{Name:'minecraft:potted_fern'}"));
         hashmap.put("minecraft:cactus0", BlockStateData.getTag(2240));
     });
-    static final Map<String, Dynamic<?>> SKULL_MAP = (Map) DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
+    static final Map<String, Dynamic<?>> SKULL_MAP = DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
         mapSkull(hashmap, 0, "skeleton", "skull");
         mapSkull(hashmap, 1, "wither_skeleton", "skull");
         mapSkull(hashmap, 2, "zombie", "head");
@@ -86,7 +86,7 @@ public class ChunkPalettedStorageFix extends DataFix {
         mapSkull(hashmap, 4, "creeper", "head");
         mapSkull(hashmap, 5, "dragon", "head");
     });
-    static final Map<String, Dynamic<?>> DOOR_MAP = (Map) DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
+    static final Map<String, Dynamic<?>> DOOR_MAP = DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
         mapDoor(hashmap, "oak_door", 1024);
         mapDoor(hashmap, "iron_door", 1136);
         mapDoor(hashmap, "spruce_door", 3088);
@@ -95,14 +95,14 @@ public class ChunkPalettedStorageFix extends DataFix {
         mapDoor(hashmap, "acacia_door", 3136);
         mapDoor(hashmap, "dark_oak_door", 3152);
     });
-    static final Map<String, Dynamic<?>> NOTE_BLOCK_MAP = (Map) DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
+    static final Map<String, Dynamic<?>> NOTE_BLOCK_MAP = DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
         for (int i = 0; i < 26; ++i) {
             hashmap.put("true" + i, BlockStateData.parse("{Name:'minecraft:note_block',Properties:{powered:'true',note:'" + i + "'}}"));
             hashmap.put("false" + i, BlockStateData.parse("{Name:'minecraft:note_block',Properties:{powered:'false',note:'" + i + "'}}"));
         }
 
     });
-    private static final Int2ObjectMap<String> DYE_COLOR_MAP = (Int2ObjectMap) DataFixUtils.make(new Int2ObjectOpenHashMap(), (int2objectopenhashmap) -> {
+    private static final Int2ObjectMap<String> DYE_COLOR_MAP = DataFixUtils.make(new Int2ObjectOpenHashMap(), (int2objectopenhashmap) -> {
         int2objectopenhashmap.put(0, "white");
         int2objectopenhashmap.put(1, "orange");
         int2objectopenhashmap.put(2, "magenta");
@@ -120,7 +120,7 @@ public class ChunkPalettedStorageFix extends DataFix {
         int2objectopenhashmap.put(14, "red");
         int2objectopenhashmap.put(15, "black");
     });
-    static final Map<String, Dynamic<?>> BED_BLOCK_MAP = (Map) DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
+    static final Map<String, Dynamic<?>> BED_BLOCK_MAP = DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
         ObjectIterator objectiterator = ChunkPalettedStorageFix.DYE_COLOR_MAP.int2ObjectEntrySet().iterator();
 
         while (objectiterator.hasNext()) {
@@ -132,7 +132,7 @@ public class ChunkPalettedStorageFix extends DataFix {
         }
 
     });
-    static final Map<String, Dynamic<?>> BANNER_BLOCK_MAP = (Map) DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
+    static final Map<String, Dynamic<?>> BANNER_BLOCK_MAP = DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
         ObjectIterator objectiterator = ChunkPalettedStorageFix.DYE_COLOR_MAP.int2ObjectEntrySet().iterator();
 
         while (objectiterator.hasNext()) {
@@ -158,7 +158,7 @@ public class ChunkPalettedStorageFix extends DataFix {
         map.put(i + "west", BlockStateData.parse("{Name:'minecraft:" + s + "_wall_" + s1 + "',Properties:{facing:'west'}}"));
 
         for (int j = 0; j < 16; ++j) {
-            map.put(i + j, BlockStateData.parse("{Name:'minecraft:" + s + "_" + s1 + "',Properties:{rotation:'" + j + "'}}"));
+            map.put(String.valueOf(i + j), BlockStateData.parse("{Name:'minecraft:" + s + "_" + s1 + "',Properties:{rotation:'" + j + "'}}"));
         }
 
     }
@@ -925,7 +925,7 @@ public class ChunkPalettedStorageFix extends DataFix {
         }
 
         private void addFix(int i, int j) {
-            Object object = (IntList) this.toFix.get(i);
+            IntList object = (IntList) this.toFix.get(i);
 
             if (object == null) {
                 object = new IntArrayList();
