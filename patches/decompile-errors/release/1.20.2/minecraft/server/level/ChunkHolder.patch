diff --git a/minecraft/server/level/ChunkHolder.java b/minecraft/server/level/ChunkHolder.java
index fd942cc..48e30a7 100644
--- a/minecraft/server/level/ChunkHolder.java
+++ b/minecraft/server/level/ChunkHolder.java
@@ -72,11 +72,11 @@ public class ChunkHolder {
         this.fullChunkFuture = ChunkHolder.UNLOADED_LEVEL_CHUNK_FUTURE;
         this.tickingChunkFuture = ChunkHolder.UNLOADED_LEVEL_CHUNK_FUTURE;
         this.entityTickingChunkFuture = ChunkHolder.UNLOADED_LEVEL_CHUNK_FUTURE;
-        this.chunkToSave = CompletableFuture.completedFuture((Object) null);
+        this.chunkToSave = CompletableFuture.completedFuture(null);
         this.chunkToSaveHistory = null;
         this.blockChangedLightSectionFilter = new BitSet();
         this.skyChangedLightSectionFilter = new BitSet();
-        this.pendingFullStateConfirmation = CompletableFuture.completedFuture((Object) null);
+        this.pendingFullStateConfirmation = CompletableFuture.completedFuture(null);
         this.sendSync = CompletableFuture.completedFuture((Object) null);
         this.pos = chunkpos;
         this.levelHeightAccessor = levelheightaccessor;
@@ -115,9 +115,9 @@ public class ChunkHolder {
     @Nullable
     public LevelChunk getTickingChunk() {
         CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getTickingChunkFuture();
-        Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = (Either) completablefuture.getNow((Object) null);
+        Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = (Either) completablefuture.getNow(null);
 
-        return either == null ? null : (LevelChunk) either.left().orElse((Object) null);
+        return either == null ? null : (LevelChunk) either.left().orElse(null);
     }
 
     public CompletableFuture<?> getChunkSendSyncFuture() {
@@ -132,9 +132,9 @@ public class ChunkHolder {
     @Nullable
     public LevelChunk getFullChunk() {
         CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getFullChunkFuture();
-        Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = (Either) completablefuture.getNow((Object) null);
+        Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = (Either) completablefuture.getNow(null);
 
-        return either == null ? null : (LevelChunk) either.left().orElse((Object) null);
+        return either == null ? null : (LevelChunk) either.left().orElse(null);
     }
 
     @Nullable
@@ -189,10 +189,10 @@ public class ChunkHolder {
     }
 
     public void sectionLightChanged(LightLayer lightlayer, int i) {
-        Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = (Either) this.getFutureIfPresent(ChunkStatus.INITIALIZE_LIGHT).getNow((Object) null);
+        Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = (Either) this.getFutureIfPresent(ChunkStatus.INITIALIZE_LIGHT).getNow(null);
 
         if (either != null) {
-            ChunkAccess chunkaccess = (ChunkAccess) either.left().orElse((Object) null);
+            ChunkAccess chunkaccess = (ChunkAccess) either.left().orElse(null);
 
             if (chunkaccess != null) {
                 chunkaccess.setUnsaved(true);
@@ -257,8 +257,9 @@ public class ChunkHolder {
                                 ClientboundSectionBlocksUpdatePacket clientboundsectionblocksupdatepacket = new ClientboundSectionBlocksUpdatePacket(sectionpos, shortset, levelchunksection);
 
                                 this.broadcast(list, clientboundsectionblocksupdatepacket);
+                                List finalList = list;
                                 clientboundsectionblocksupdatepacket.runUpdates((blockpos1, blockstate1) -> {
-                                    this.broadcastBlockEntityIfNeeded(list, level, blockpos1, blockstate1);
+                                    this.broadcastBlockEntityIfNeeded(finalList, level, blockpos1, blockstate1);
                                 });
                             }
                         }
@@ -394,7 +395,7 @@ public class ChunkHolder {
         this.pendingFullStateConfirmation = completablefuture1;
         completablefuture.thenAccept((either) -> {
             either.ifLeft((levelchunk) -> {
-                completablefuture1.complete((Object) null);
+                completablefuture1.complete(null);
             });
         });
     }
