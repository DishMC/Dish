diff --git a/minecraft/Util.java b/minecraft/Util.java
index 42a8ab3..f625b51 100644
--- a/minecraft/Util.java
+++ b/minecraft/Util.java
@@ -30,6 +30,7 @@ import java.nio.file.Path;
 import java.nio.file.spi.FileSystemProvider;
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.time.Duration;
 import java.time.Instant;
 import java.time.ZonedDateTime;
@@ -111,7 +112,7 @@ public class Util {
     }
 
     public static <T extends Comparable<T>> String getPropertyName(Property<T> property, Object object) {
-        return property.getName((Comparable) object);
+        return property.getName((T) object);
     }
 
     public static String makeDescriptionId(String s, @Nullable ResourceLocation resourcelocation) {
@@ -284,7 +285,7 @@ public class Util {
 
             thread.setName(s);
 
-            Object object;
+            V object;
 
             try {
                 object = supplier.get();
@@ -338,8 +339,8 @@ public class Util {
     public static <T> T findPreviousInIterable(Iterable<T> iterable, @Nullable T t0) {
         Iterator<T> iterator = iterable.iterator();
 
-        Object object;
-        Object object1;
+        T object;
+        T object1;
 
         for (object1 = null; iterator.hasNext(); object1 = object) {
             object = iterator.next();
@@ -364,7 +365,7 @@ public class Util {
     }
 
     public static <K> Strategy<K> identityStrategy() {
-        return Util.IdentityStrategy.INSTANCE;
+        return (Strategy<K>) IdentityStrategy.INSTANCE;
     }
 
     public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<V>> list) {
@@ -412,7 +413,7 @@ public class Util {
         list.forEach((completablefuture) -> {
             int i = list1.size();
 
-            list1.add((Object) null);
+            list1.add(null);
             acompletablefuture[i] = completablefuture.whenComplete((object, throwable) -> {
                 if (throwable != null) {
                     consumer.accept(throwable);
@@ -807,7 +808,7 @@ public class Util {
         BlockingQueue<Runnable> blockingqueue = new LinkedBlockingQueue();
 
         Objects.requireNonNull(blockingqueue);
-        Object object = function.apply(blockingqueue::add);
+        T object = function.apply(blockingqueue::add);
 
         while (!predicate.test(object)) {
             try {
@@ -849,7 +850,7 @@ public class Util {
         Optional<PartialResult<T>> optional = dataresult.error();
 
         if (optional.isPresent()) {
-            throw (Exception) function.apply(((PartialResult) optional.get()).message());
+            throw function.apply((optional.get()).message());
         } else {
             return dataresult.result().orElseThrow();
         }
@@ -887,7 +888,7 @@ public class Util {
 
         public void openUrl(URL url) {
             try {
-                Process process = (Process) AccessController.doPrivileged(() -> {
+                Process process = (Process) AccessController.doPrivileged((PrivilegedExceptionAction<Process>) () -> {
                     return Runtime.getRuntime().exec(this.getOpenUrlArguments(url));
                 });
 
